name: "Callback Phishing solicitation in message body"
description: "A fraudulent invoice/receipt found in the body of the message.\nCallback Phishing is an attempt by an attacker to solicit the victim (recipient) to call a phone number. \nThe resulting interaction could lead to a multitude of attacks ranging from Financial theft, Remote Access Trojan (RAT) Installation or Ransomware Deployment.\n"
type: "rule"
severity: "medium"
source: "type.inbound\nand length(attachments) == 0\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\nand (\n  sender.email.domain.root_domain in $free_email_providers\n  or sender.email.domain.tld in $suspicious_tlds\n  or network.whois(sender.email.domain).found == false\n  or headers.mailer in~ (\"Microsoft CDO for Windows 2000\")\n  or (\n    length(recipients.to) == 1\n    and all(recipients.to, .email.domain.domain not in $org_domains)\n  )\n)\nand (\n  strings.ilike(body.current_thread.text,\n                \"*mcfee*\",\n                \"*mcafee*\",\n                \"*norton*\",\n                \"*geek*squad*\",\n                \"*paypal*\",\n                \"*ebay*\",\n                \"*symantec*\",\n                \"*best buy*\",\n                \"*lifelock*\",\n                \"*utilities premium*\",\n                \"*pc security*\",\n                \"*at&t*\"\n                \n  )\n  or regex.icontains(body.current_thread.text, \"pay.{0,10}pal\")\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n         .name in (\"PayPal\", \"Norton\", \"GeekSquad\", \"Ebay\", \"McAfee\", \"AT&T\")\n  )\n)\nand length(body.current_thread.text) < 1750\nand (\n  (\n    3 of (\n      strings.ilike(body.current_thread.text, '*purchase*'),\n      strings.ilike(body.current_thread.text, '*payment*'),\n      strings.ilike(body.current_thread.text, '*transaction*'),\n      strings.ilike(body.current_thread.text, '*subscription*'),\n      strings.ilike(body.current_thread.text, '*antivirus*'),\n      strings.ilike(body.current_thread.text, '*order*'),\n      strings.ilike(body.current_thread.text, '*support*'),\n      strings.ilike(body.current_thread.text, '*help line*'),\n      strings.ilike(body.current_thread.text, '*receipt*'),\n      strings.ilike(body.current_thread.text, '*invoice*'),\n      strings.ilike(body.current_thread.text, '*call*'),\n      strings.ilike(body.current_thread.text, '*cancel*'),\n      strings.ilike(body.current_thread.text, '*renew*'),\n      strings.ilike(body.current_thread.text, '*refund*'),\n      strings.ilike(body.current_thread.text, \"*contact us at*\"),\n      strings.ilike(body.current_thread.text, \"*+1*\")\n    )\n    // phone number regex\n    and (\n      regex.icontains(body.current_thread.text,\n                      '\\+?(\\d{1}.)?\\(?\\d{3}?\\)?.\\d{3}.?\\d{4}'\n      )\n      or regex.icontains(body.current_thread.text,\n                         '\\+?(\\d{1,2})?\\s?\\(?\\d{3}\\)?[\\s\\.\\-⋅]{0,5}\\d{3}[\\s\\.\\-⋅]{0,5}\\d{4}'\n      )\n    )\n  )\n  or (\n    any(file.explode(beta.message_screenshot()),\n        3 of (\n          strings.ilike(.scan.ocr.raw, '*purchase*'),\n          strings.ilike(.scan.ocr.raw, '*payment*'),\n          strings.ilike(.scan.ocr.raw, '*transaction*'),\n          strings.ilike(.scan.ocr.raw, '*subscription*'),\n          strings.ilike(.scan.ocr.raw, '*antivirus*'),\n          strings.ilike(.scan.ocr.raw, '*order*'),\n          strings.ilike(.scan.ocr.raw, '*support*'),\n          strings.ilike(.scan.ocr.raw, '*help line*'),\n          strings.ilike(.scan.ocr.raw, '*receipt*'),\n          strings.ilike(.scan.ocr.raw, '*invoice*'),\n          strings.ilike(.scan.ocr.raw, '*call*'),\n          strings.ilike(.scan.ocr.raw, '*cancel*'),\n          strings.ilike(.scan.ocr.raw, '*renew*'),\n          strings.ilike(.scan.ocr.raw, '*refund*'),\n          strings.ilike(.scan.ocr.raw, '*contact us at*'),\n          strings.ilike(.scan.ocr.raw, '*+1*')\n        )\n        // phone number regex\n        and (\n          regex.icontains(.scan.ocr.raw,\n                          '\\+?(\\d{1}.)?\\(?\\d{3}?\\)?.\\d{3}.?\\d{4}'\n          )\n          or regex.icontains(.scan.ocr.raw,\n                             '\\+?(\\d{1,2})?\\s?\\(?\\d{3}\\)?[\\s\\.\\-⋅]{0,5}\\d{3}[\\s\\.\\-⋅]{0,5}\\d{4}'\n          )\n        )\n    )\n  )\n)\n// not high trust sender domains\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\nand not strings.ends_with(headers.message_id, \"@shopify.com>\")\n"
attack_types:
  - "Callback Phishing"
tactics_and_techniques:
  - "Free email provider"
  - "Impersonation: Brand"
  - "Out of band pivot"
  - "Social engineering"
detection_methods:
  - "File analysis"
  - "Sender analysis"
id: "10a3a446-c70f-5843-a4e4-4d815d33fcb1"
testing_pr: 2311
testing_sha: 101c1e977be7aa0f7e6444e7ec0da13da9f15ad8
