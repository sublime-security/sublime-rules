name: "Brand impersonation: DocuSign"
description: |
  Attack impersonating a DocuSign request for signature.
references:
  - "https://playground.sublimesecurity.com?id=2d2c6472-fabb-4952-b902-573a6294aa2f"
type: "rule"
severity: "high"
source: |
  type.inbound
  and (
    // orgs can have docusign.company.com
    strings.ilike(sender.email.email, '*docusign.net*', '*docusign.com*')
  
    // if the above is true, you'll see a "via Docusign"
    or strings.ilike(sender.display_name, '*docusign*')
  
    // detects 1 character variations,
    // such as DocuSlgn (with an "L" instead of an "I")
    or strings.ilevenshtein(sender.display_name, "docusign") == 1
    or strings.ilike(sender.display_name, "*docuonline*", "*via *signature*")
    or (
      strings.istarts_with(body.html.inner_text, "docusign")
      and not strings.istarts_with(body.current_thread.text, "docusign")
    )
    or (
      (
        (
          regex.icontains(sender.display_name, '\bdocu\b')
          and strings.icontains(sender.display_name, 'sign')
        )
        or (
          regex.icontains(subject.subject, '\bdocu\b')
          and strings.icontains(subject.subject, 'sign')
        )
        or regex.icontains(body.current_thread.text, '\bdocu.?sign\b')
      )
      and any(body.links,
              .display_text in~ (
                "Review Document",
                "View Document",
                "View Completed Document",
                "Review and Sign"
              )
      )
      // negate replies/forwards which involve a legit docusign message-id format
      and not any(headers.references,
                  strings.iends_with(., '@docusign.net')
                  and regex.imatch(., '[0-9a-f]{32}@docusign.net')
      )
    )
    or (
      (
        regex.icontains(body.html.raw, '<font size="[0-9]"[^\>]*>DocuSign</font>')
        or regex.icontains(body.html.raw, '\nDocu(?:<[^\>]+>\s*)+Sign<')
        or regex.icontains(body.html.raw,
                           '<span[^>]*style="[^"]*">Docu.?Sign<\/span>'
        )
        or regex.icontains(body.html.raw, '<h1[^\>]*>\s*Docu.?Sign')
        or regex.icontains(body.html.raw,
                           '<span[^>]*style="[^"]*">(Docu|D(?:ocu?)?)<\/span><span[^>]*style="[^"]*">(Sign|S(?:ign?)?)<\/span>'
        )
        or regex.icontains(body.html.raw, '<strong>Docu.?Sign</strong>')
        or regex.icontains(body.html.raw, '<div class="logo">DocuSign</div>')
        or regex.icontains(body.html.raw,
                           // Basic variations with HTML encoding
                           '(?:D|&#68;|&#x44;)(?:&#?[0-9a-fA-F]{2,6};|\s|o|о|&#1086;|&#x43e;)(?:&#?[0-9a-fA-F]{2,6};|\s|c|с|&#1089;|&#x441;)u(?:&#?[0-9a-fA-F]{2,6};|\s)?S(?:&#?[0-9a-fA-F]{2,6};|\s|i|і|&#1110;|&#x456;)(?:&#?[0-9a-fA-F]{2,6};|\s|g|ɡ|&#609;|&#x261;)(?:n|&#110;|&#x6e;)',
                           // Common homograph patterns
                           '(?:[DⅮᎠᗞᗡ𝐃𝐷𝑫𝒟𝓓𝔇𝔻𝕯𝖣])(?:[oοоօ0Ооʘ◯])(?:[cсçҫ¢ϲС])u(?:[sѕЅ5$])(?:[iіІ1l!|])(?:[gǵġģ9ɡ])(?:[nոռℼη𝐧𝑛𝒏𝓃𝓷𝔫𝕟𝖓])',
  
                           // Variant with invisible characters and combining marks
                           '[DᎠᗞⅅ]\s*[oо0]\s*[cс]\s*u\s*[sЅ]\s*[iіl]\s*[gǵɡ]\s*[nոռ]',
  
                           // Look for HTML entities for each letter in sequence
                           '(?:D|&#68;|&#x44;)(?:o|о|&#111;|&#x6f;|&#1086;|&#x43e;|&#959;|&#x3bf;)(?:c|с|&#99;|&#x63;|&#1089;|&#x441;|&#1010;|&#231;|&#x67;|&#265;|&#x109;)(?:u|&#117;|&#x75;|&#1091;|&#x443;|&#965;|&#x3c5;)(?:s|&#115;|&#x73;|&#1109;|&#x455;)(?:i|і|&#105;|&#x69;|&#1110;|&#x456;|&#305;|&#x131;)(?:g|&#103;|&#x67;|&#609;|&#x261;|&#287;|&#x11f;)(?:n|&#110;|&#x6e;|&#1085;|&#x43d;|&#951;|&#x3b7;)',
                           // Handle repeated HTML entities and variation selectors (using Unicode class)                           
                           'D(?:&#[0-9]{1,7};)*\p{Mn}*o(?:&#[0-9]{1,7};)*\p{Mn}*c(?:&#[0-9]{1,7};)*\p{Mn}*u(?:&#[0-9]{1,7};)*\p{Mn}*[Ss](?:&#[0-9]{1,7};)*\p{Mn}*i(?:&#[0-9]{1,7};)*\p{Mn}*g(?:&#[0-9]{1,7};)*\p{Mn}*n',
        )
      )
      and (
        regex.icontains(body.html.raw,
                        'b(?:ackground(?:-color)?|g?color):\s*rgb\(30,\s*76,\s*161\)'
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color):\s*rgb\(30,\s*76,\s*161\)'
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color):\s*rgb\(61,\s*170,\s*73\)'
        )
        or regex.icontains(body.html.raw,
                           '<(?:div|td|table)[^>]*b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#1e4ca1[^>]*>',
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#214e9f'
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#3260a7'
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#0056b3'
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#1e4ca1'
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#214395'
        )
        or regex.icontains(body.html.raw,
                           'b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#325bb8'
        )
        or regex.icontains(body.html.raw,
                           '<table[^>]*style="[^"]*b(?:ackground(?:-color)?|g?color)(?::|=)\s*\"?#1E4CA1[^"]*"[^>]*>(.*?)<\/table>'
        )
        or regex.icontains(body.html.raw, '<title>Document.{0,50}</title>')
        or any(body.links, regex.icontains(.display_text, 'view.{0,3}doc'))
        or any(body.links, regex.contains(.display_text, '\bDOCUMENT'))
      )
    )
  )
  
  // identifies the main CTA in the email, eg "Review now" or "Review document"
  // this should always be a known docusign domain,
  // even with branded docusign subdomains
  and (
    any(body.links,
        // we've observed invisible characters in the display name
        // such as U+034f(look carefully): "Revi͏ew Now"
        (
          strings.ilevenshtein(.display_text, "Review Now") <= 3
          or strings.ilevenshtein(.display_text, "Review and Sign") <= 3
          or (
            strings.icontains(.display_text, "Review")
            and not strings.icontains(.display_text, "Review Us")
          )
          or strings.icontains(.display_text, "Now")
          or strings.icontains(.display_text, "document")
          or strings.icontains(.display_text, "docusign")
        )
        and not .href_url.domain.root_domain in ("docusign.com", "docusign.net")
        and not (
          .href_url.domain.root_domain == "mimecastprotect.com"
          and (
            .href_url.query_params is not null
            and (
              regex.icontains(.href_url.query_params,
                              'domain=(?:\w+.)?docusign.net'
              )
              or regex.icontains(.href_url.query_params,
                                 'domain=(?:\w+.)?docusign.com'
              )
            )
          )
        )
    )
    // Suspicious attachment
    or any(attachments,
           (
             .file_extension in~ ("html", "htm", "shtml", "dhtml")
             or .file_extension in~ $file_extensions_common_archives
             or .file_type == "html"
             or .content_type == "text/html"
           )
           and 1 of (
             (
               regex.icontains(file.parse_html(.).raw, '\s{0,}<script.*')
               and regex.icontains(file.parse_html(.).raw, "</script>")
             ),
             strings.ilike(file.parse_html(.).raw,
                           "*createElement*",
                           "*appendChild*",
                           "*createObjectURL*"
             ),
             strings.icount(file.parse_html(.).raw, "/*") > 10,
             any($free_subdomain_hosts, strings.icontains(..file_name, .))
           )
    )
  )
  
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    coalesce(sender.email.domain.root_domain in $high_trust_sender_root_domains
             and not headers.auth_summary.dmarc.pass,
             false
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  
  // adding negation for messages originating from docusigns api
  // and the sender.display.name contains "via"
  and not (
    any(headers.hops,
        any(.fields,
            .name == "X-Api-Host" and strings.ends_with(.value, "docusign.net")
        )
    )
    and strings.contains(sender.display_name, "via")
  )
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Lookalike domain"
  - "Social engineering"
  - "Spoofing"
detection_methods:
  - "Header analysis"
  - "Sender analysis"
  - "URL analysis"
id: "4d29235c-08b9-5f9b-950e-60b05c4691fb"
