name: "Brand impersonation: DocuSign"
description: |
  Attack impersonating a DocuSign request for signature.
references:
  - "https://playground.sublimesecurity.com?id=2d2c6472-fabb-4952-b902-573a6294aa2f"
type: "rule"
severity: "high"
source: |
  type.inbound
  and (
    // orgs can have docusign.company.com
    strings.ilike(sender.email.email, '*docusign.net*', '*docusign.com*')
  
    // if the above is true, you'll see a "via Docusign"
    or strings.ilike(sender.display_name, '*docusign*')
  
    // detects 1 character variations,
    // such as DocuSlgn (with an "L" instead of an "I")
    or strings.ilevenshtein(sender.display_name, "docusign") == 1
    or strings.ilike(sender.display_name, "*docuonline*", "*via *signature*")
    or (
      strings.istarts_with(body.html.inner_text, "docusign")
      and not strings.istarts_with(body.current_thread.text, "docusign")
    )
    or (
      (
        regex.icontains(body.html.raw, '<font size="[0-9]">DocuSign</font>')
        or regex.icontains(body.html.raw, '\nDocu(?:<[^\>]+>\s*)+Sign<')
        or regex.icontains(body.html.raw,
                           '<span[^>]*style="[^"]*">DocuSign<\/span>'
        )
        or regex.icontains(body.html.raw, '<strong>DocuSign</strong>')
        or regex.icontains(body.html.raw, '<div class="logo">DocuSign</div>')
        or regex.icontains(body.html.raw,
                           'D&#917540;&#917540;o&#917540;&#917540;c︀uS&#917540;&#917540;i︀gn'
        )
      )
      and (
        regex.icontains(body.html.raw, 'background:\s*rgb\(30,\s*76,\s*161\)')
        or regex.icontains(body.html.raw,
                           'background-color:\s*rgb\(30,\s*76,\s*161\)'
        )
        or regex.icontains(body.html.raw,
                           'background-color:\s*rgb\(61,\s*170,\s*73\)'
        )
        or regex.icontains(body.html.raw,
                           '<div[^>]*BACKGROUND-COLOR: #1e4ca1[^>]*>',
                           '<td[^>]*BACKGROUND-COLOR: #1e4ca1[^>]*>',
                           '<table[^>]*background-color:\s*#1e4ca1'
        )
        or regex.icontains(body.html.raw, 'background-color:#214e9f;')
        or regex.icontains(body.html.raw, 'background-color:#3260a7')
        or regex.icontains(body.html.raw, 'background-color:#0056b3')
        or regex.icontains(body.html.raw, 'BACKGROUND-COLOR:#1e4ca1')
        or regex.icontains(body.html.raw, 'background-color:#214395')
        or regex.icontains(body.html.raw,
                           '<table[^>]*style="[^"]*background:\s*#1E4CA1[^"]*"[^>]*>(.*?)<\/table>'
        )
        or any(body.links, regex.icontains(.display_text, 'view.{0,3}doc'))
        or any(body.links, regex.contains(.display_text, '\bDOCUMENT'))
      )
    )
  )
  
  // identifies the main CTA in the email, eg "Review now" or "Review document"
  // this should always be a known docusign domain,
  // even with branded docusign subdomains
  and any(body.links,
          // we've observed invisible characters in the display name
          // such as U+034f(look carefully): "Revi͏ew Now"
          (
            strings.ilevenshtein(.display_text, "Review Now") <= 3
            or (
              strings.icontains(.display_text, "Review")
              and not strings.icontains(.display_text, "Review Us")
            )
            or strings.icontains(.display_text, "Now")
            or strings.icontains(.display_text, "document")
          )
        and not .href_url.domain.root_domain in ("docusign.com", "docusign.net")
        and not (
          .href_url.domain.root_domain == "mimecastprotect.com"
          and (
            .href_url.query_params is not null
            and (regex.icontains(.href_url.query_params, 'domain=(?:\w+.)?docusign.net')
            or regex.icontains(.href_url.query_params, 'domain=(?:\w+.)?docusign.com'))
          )
        )
  )
  
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    coalesce(sender.email.domain.root_domain in $high_trust_sender_root_domains
             and not headers.auth_summary.dmarc.pass,
             false
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  
  // adding negation for messages originating from docusigns api
  // and the sender.display.name contains "via"
  and not (
    any(headers.hops,
        any(.fields,
            .name == "X-Api-Host" and strings.ends_with(.value, "docusign.net")
        )
    )
    and strings.contains(sender.display_name, "via")
  )
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Lookalike domain"
  - "Social engineering"
  - "Spoofing"
detection_methods:
  - "Header analysis"
  - "Sender analysis"
  - "URL analysis"
id: "4d29235c-08b9-5f9b-950e-60b05c4691fb"
