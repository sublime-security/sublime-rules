name: "Impersonation: Suspected supplier impersonation with suspicious content"
description: "This rule detects supplier impersonation by checking for: similar linked domains to the sender, non-freemail senders using freemail infrastructure, sender domains less than 90 days old, unsolicited communication or no prior interaction with the reply-to address, and a suspicious body."
type: "rule"
severity: "high"
source: "type.inbound\n\n// a linked domain is similar but not the same as the sender domain\nand any(body.links,\n        length(.href_url.domain.sld) > 3\n        and 0 < strings.levenshtein(.href_url.domain.sld,\n                                    sender.email.domain.sld\n        ) <= 2\n        and not sender.email.domain.root_domain == \"onmicrosoft.com\"\n\n        // looking for lookalike domains above, typically the registrars won't match\n        and network.whois(sender.email.domain).registrar_name != network.whois(.href_url.domain\n        ).registrar_name\n\n        // and one of the domains is less than 30 days old\n        and (\n          network.whois(sender.email.domain).days_old < 30\n          or network.whois(.href_url.domain).days_old < 30\n        )\n)\n// the sender is not a freemail, but the message or the in-reply-to indicates it traversed a freemail infrastructure, likely an auto forwarding rule. Or the sender or reply-to domain is new\nand (\n  sender.email.domain.root_domain not in $free_email_providers\n  and (\n    any(headers.references,\n        any($free_email_providers, strings.contains(.., .))\n        and not strings.ends_with(., \"outlook.com\")\n    )\n    or (\n      any($free_email_providers,\n          strings.contains(headers.in_reply_to, .)\n          and not strings.ends_with(headers.in_reply_to, 'outlook.com')\n      )\n      // with the suspicious traversal tolerate 90 days\n      and network.whois(sender.email.domain).days_old < 90\n    )\n    or any(headers.reply_to,\n           network.whois(.email.domain).days_old < 30\n           and .email.email != sender.email.email\n    )\n  )\n)\n\n//  not solicited, nor ever communicated with\nand (\n  not profile.by_sender_domain().solicited\n  or // reply-to is not in $recipient_emails\n any(headers.reply_to, .email.email not in $recipient_emails)\n)\nand (\n  2 of (\n    // language attempting to engage\n    (\n      any(ml.nlu_classifier(coalesce(body.plain.raw, body.current_thread.text)).entities,\n          .name == \"request\"\n      )\n      and any(ml.nlu_classifier(coalesce(body.plain.raw,\n                                         body.current_thread.text\n                                )\n              ).entities,\n              .name == \"financial\"\n      )\n    ),\n    // payment tag high confidence \n    any(ml.nlu_classifier(coalesce(body.plain.raw, body.current_thread.text)).tags,\n        .name == \"payment\" and .confidence == \"high\"\n    ),\n    // invoicing language\n    any(ml.nlu_classifier(coalesce(body.plain.raw, body.current_thread.text)).tags,\n        .name == \"invoice\"\n    ),\n\n    // urgency request\n    any(ml.nlu_classifier(coalesce(body.plain.raw, body.current_thread.text)).entities,\n        .name == \"urgency\"\n    )\n  )\n)\n"
attack_types:
  - "BEC/Fraud"
tactics_and_techniques:
  - "Evasion"
  - "Free email provider"
  - "Lookalike domain"
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Header analysis"
  - "Natural Language Understanding"
  - "Sender analysis"
  - "URL analysis"
  - "Whois"
id: "63d8b1ce-7409-58d9-aa78-fffba12bba29"
testing_pr: 2356
testing_sha: 30affdbcc1197a24eb388ba6c2ed2f58613328cb
