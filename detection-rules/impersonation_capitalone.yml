name: "Brand Impersonation: Capital One"
description: "This detection rule identifies inbound messages containing Capital One branding indicators in display names, sender addresses, message content, or embedded logos, while excluding legitimate Capital One domains and authenticated communications from known trusted senders."
type: "rule"
severity: "high"
source: "type.inbound\nand (\n  any([\n        strings.replace_confusables(sender.display_name),\n        strings.replace_confusables(subject.subject),\n        // domain parts of sender\n        sender.email.local_part,\n        sender.email.domain.sld\n      ],\n      // quick checks first\n      strings.icontains(., 'Capital One')\n      or strings.icontains(., 'CapitalOne')\n\n      // slower checks next\n      or regex.icontains(., 'Capital.?One')\n      // levenshtein distince similar to captial one\n      or strings.ilevenshtein(., 'Capital One') <= 2\n  )\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n         .name == \"Capital One Bank\" and .confidence != \"low\"\n  )\n)\nand not (\n  sender.email.domain.root_domain in (\n    \"capitalone.co.uk\",\n    \"capitalone.com\",\n    \"capitaloneshopping.com\",\n    \"capitalonesoftware.com\",\n    \"capitalonebooking.com\",\n    \"capitalonetravel.com\",\n    \"olbanking.com\", // a fiserv.one domain\n    \"bynder.com\", // Digital Assest Mgmt\n    \"gcs-web.com\", // investor relations run by capital one\n    \"capitalonearena.com\", // the arena\n    \"monumentalsports.com\", // the company that owns a bunch of teams that play at the arena?\n    \"ticketmaster.com\", // sell and advertises tickets at Capital One Arena\n  )\n  and headers.auth_summary.dmarc.pass\n)\n// and the sender is not from high trust sender root domains\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\nand // suspicious indicators here\n (\n  // // password theme\n  (\n    strings.icontains(body.current_thread.text, \"new password\")\n    or regex.icontains(body.current_thread.text,\n                       '(?:credentials?|password)\\s*(?:\\w+\\s+){0,3}\\s*(?:compromise|reset|expir(?:ation|ed)|update|invalid|incorrect|changed|(?:mis)?match)',\n                       '(?:compromise|reset|expir(?:ation|ed)|update|invalid|incorrect|changed|(?:mis)?match)\\s*(?:\\w+\\s+){0,3}\\s*(?:credentials?|password)',\n                       '(?:short|weak|chang(?:e|ing)|reset)\\s*(?:\\w+\\s+){0,3}\\s*(?:credentials?|password)',\n                       '(?:credentials?|password)\\s*(?:\\w+\\s+){0,3}\\s*(?:short|weak|chang(?:e|ing)|reset)',\n    )\n  )\n  // // login failures\n  or (\n    strings.icontains(body.current_thread.text, \"unusual number of\")\n    or strings.icontains(body.current_thread.text, \"security breach\")\n    or (\n      strings.icontains(body.current_thread.text, \"security alert\")\n      // some capital one notiifcaitons include directions to \n      // change notificaiton preferences to only security alerts\n      and (\n        strings.icount(body.current_thread.text, \"security alert\") > strings.icount(body.current_thread.text,\n                                                                                  \"sign in to your account and select Security Alerts.\"\n        )\n      )\n    )\n    or strings.icontains(body.current_thread.text, \"account remains secure\")\n    or strings.icontains(body.current_thread.text, \"please verify your account\")\n    or strings.icontains(body.current_thread.text, \"suspicious activity detected\")\n    or strings.icontains(body.current_thread.text, \"temporarily locked out\")\n    or regex.icontains(body.current_thread.text,\n                       '(?:invalid|unrecognized|unauthorized|fail(?:ed|ure)?|suspicious|unusual|attempt(?:ed)?\\b|tried to)\\s*(?:\\w+\\s+){0,3}\\s*(?:log(?:.?in)?|sign(?:.?in)?|account|access|activity)',\n                       '(?:log(?:.?in)?|sign(?:.?in)?|account|access|activity)\\s*(?:\\w+\\s+){0,3}\\s*(?:invalid|unrecognized|fail(?:ed|ure)?|suspicious|unusual|attempt(?:ed)?\\b)'\n    )\n  )\n  // // account locked\n  or (\n    strings.icontains(body.current_thread.text, \"been suspend\")\n    or strings.icontains(body.current_thread.text, \"will be restored\")\n    or strings.icontains(body.current_thread.text, \"security reasons\")\n    or strings.icontains(body.current_thread.text, \"temporarily restricted access\")\n    or regex.icontains(body.current_thread.text,\n                       'acc(?:ou)?n?t\\s*(?:\\w+\\s+){0,3}\\s*(?:authenticat(?:e|ion)|activity|\\bho[li]d\\b|terminat|[il1]{2}m[il1]t(?:s|ed|ation)|b?locked|de-?activat|suspen(?:ed|sion)|restrict(?:ed|ion)?|expir(?:ed?|ing)|v[il]o[li]at|verif(?:y|ication))',\n                       '(?:authenticat(?:e|ion)|activity|\\bho[li]d\\b|terminat|[il1]{2}m[il1]t(?:s|ed|ation)|b?locked|de-?activat|suspen(?:ed|sion)|restrict(?:ed|ion)?|expir(?:ed?|ing)|v[il]o[li]at|verif(?:y|ication))\\s*(?:\\w+\\s+){0,3}\\s*acc(?:ou)?n?t\\b'\n    )\n  )\n  // // secure messages\n  or (\n    regex.icontains(body.current_thread.text,\n                    '(?:encrypt(?:ion|ed)?|secur(?:e|ity)) (?:\\w+\\s+){0,3}\\s*message'\n    )\n    or strings.icontains(body.current_thread.text, \"document portal\")\n    or regex.icontains(body.current_thread.text,\n                       \"has been (?:encrypt|sent secure)\"\n    )\n    or regex.icontains(body.current_thread.text,\n                       'encryption (?:\\w+\\s+){0,3}\\s*tech'\n    )\n  )\n  // // documents to view\n  or (\n    // we can skip the regex if the diplay_text doesn't contain document\n    // this might need to be removed if the regex is expanded\n    strings.icontains(body.current_thread.text, 'document')\n    and regex.icontains(body.current_thread.text,\n                        'document\\s*(?:\\w+\\s+){0,3}\\s*(?:ready|posted|review|available|online)',\n                        '(?:ready|posted|review|available|online)\\s*(?:\\w+\\s+){0,3}\\s*document'\n    )\n  )\n  // // account/profile details \n  or (\n    strings.icontains(body.current_thread.text, \"about your account\")\n    or strings.icontains(body.current_thread.text, \"action required\")\n    or regex.icontains(body.current_thread.text,\n                       '(update|\\bedit\\b|modify|revise|verif(?:y|ication)|discrepanc(?:y|ies)|mismatch(?:es)?|inconsistenc(?:y|ies)?|difference(?:s)?|anomal(?:y|ies)?|irregularit(?:y|ies)?)\\s*(?:\\w+\\s+){0,4}\\s*(?:account|detail|record|data|info(?:rmation)?)',\n                       '(?:account|detail|record|data|info(?:rmation)?)\\s*(?:\\w+\\s+){0,4}\\s*(update|\\bedit\\b|modify|revise|verif(?:y|ication)|discrepanc(?:y|ies)|mismatch(?:es)?|inconsistenc(?:y|ies)?|difference(?:s)?|anomal(?:y|ies)?|irregularit(?:y|ies)?)'\n    )\n  )\n  // // other calls to action that are unexpected\n  or (strings.icontains(body.current_thread.text, \"download the attachment\"))\n\n  // the links contain suspect wording\n  or (\n    0 < length(body.links) <= 50\n    and any(body.links,\n            (\n              regex.icontains(.display_text, '(?:log|sign).?in')\n              or strings.icontains(.display_text, 'confirm')\n              or strings.icontains(.display_text, 'i recongize it')\n              or strings.icontains(.display_text, \"something\\'s wrong\")\n              or regex.icontains(.display_text,\n                                 '(?:(?:re)?view|see|read)\\s*(?:\\w+\\s*){0,3}\\s*(?:document|message|now|account)'\n              )\n              or regex.icontains(.display_text,\n                                 'restore\\s*(?:\\w+\\s*){0,3}\\s*(?:account|access)'\n              )\n            )\n            and not regex.icontains(.display_text, 'confirm\\s*(?:\\w+\\s*){0,3}\\s*this message')\n            and .href_url.domain.root_domain != \"capitalone.com\"\n    )\n  )\n  // the message contains a disclaimer but then isn't \n  or (\n    regex.icontains(body.current_thread.text,\n                    'To ensure delivery, add [^\\@]+@[^\\s]*capitalone.com to your address book.'\n    )\n    and sender.email.domain.root_domain != \"capitalone.com\"\n  )\n)\n// lots of recruiting mentions oppurtunties at capital one, often including the logo\nand not (\n    strings.icontains(subject.subject, 'job')\n    or strings.icontains(subject.subject, 'internship')\n    or strings.icontains(body.current_thread.text, 'recruiting team')\n)\n// negate bounce backs\nand not (\n  strings.like(sender.email.local_part,\n               \"*postmaster*\",\n               \"*mailer-daemon*\",\n               \"*administrator*\"\n  )\n  and any(attachments,\n          .content_type in (\n            \"message/rfc822\",\n            \"message/delivery-status\",\n            \"text/calendar\"\n          )\n  )\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Lookalike domain"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Sender analysis"
  - "Header analysis"
id: "d53848e4-fc40-5bd1-ad5e-c9c4e85a669f"
testing_pr: 2151
testing_sha: 473f055af3becd62072ed5298c49cfa2e97ab6e2
