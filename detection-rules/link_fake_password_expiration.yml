name: "Credential Phishing: Fake Password Expiration from New and Unsolicited sender"
description: "This rule looks for password expiration verbiage in the subject and body. Requiring between 1 - 9 links, a short body, and NLU in addition to statically specified term anchors. High trust senders are also negated."
type: "rule"
severity: "medium"
source: "type.inbound\n\n// few links which are not in $org_domains\nand 0 < length(filter(body.links, .href_url.domain.domain not in $org_domains)) <= 10\n\n// no attachments or suspicious attachment\nand (\n  length(attachments) == 0\n  or any(filter(attachments, .file_type in (\"pdf\", \"doc\", \"docx\")),\n         any(file.explode(.),\n             .scan.entropy.entropy > 7 and length(.scan.ocr.raw) < 20\n         )\n  )\n  // or there are duplicate pdfs in name \n  or (\n    length(filter(attachments, .file_type == \"pdf\")) > length(distinct(filter(attachments,\n                                                                              .file_type == \"pdf\"\n                                                                       ),\n                                                                       .file_name\n                                                              )\n    )\n    or \n    // all PDFs are the same MD5\n    length(distinct(filter(attachments, .file_type == \"pdf\"), .md5)) == 1\n    // the attachments are all images\n    or all(attachments, .file_type in $file_types_images)\n  )\n)\n\n// body contains expire, expiration, loose, lose \nand (\n  regex.icontains(body.current_thread.text,\n                  '(expir(e)?(ation|s)|\\blo(o)?se\\b|(?:offices?|microsoft).365|re.{0,3}confirm)|due for update'\n  )\n  and not strings.icontains(body.current_thread.text, 'link expires in ')\n)\nand (\n  // subject or body contains account or access\n  any([subject.subject, body.current_thread.text],\n      regex.icontains(., \"account|access|your email\")\n  )\n  // suspicious use of recipients email address\n  or any(recipients.to,\n         any([subject.subject, body.current_thread.text],\n             strings.icontains(strings.replace_confusables(.),\n                               ..email.local_part\n             )\n             or strings.icontains(strings.replace_confusables(.), ..email.email)\n         )\n  )\n)\n\n// subject or body must contains password\nand any([\n          strings.replace_confusables(subject.subject),\n          strings.replace_confusables(body.current_thread.text)\n        ],\n        regex.icontains(., '\\bpassword\\b', '\\bmulti.?factor\\b')\n)\nand (\n  any(ml.nlu_classifier(strings.replace_confusables(body.current_thread.text)).intents,\n      .name == \"cred_theft\" and .confidence == \"high\"\n  )\n  or 3 of (\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'password'),\n      regex.icontains(strings.replace_confusables(body.current_thread.text), 'password\\s*(?:\\w+\\s+){0,4}\\s*reconfirm'),\n      regex.icontains(strings.replace_confusables(body.current_thread.text), 'keep\\s*(?:\\w+\\s+){0,4}\\s*password'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'password is due'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'expiration'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'expire'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'expiring'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'kindly'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'renew'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'review'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'click below'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'kicked out'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'required now'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'immediate action'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'security update'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'blocked'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'locked'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'interruption'),\n      strings.icontains(strings.replace_confusables(body.current_thread.text), 'action is not taken'),\n\n  )\n)\n\n// body length between 200 and 2000\nand (\n  200 < length(body.current_thread.text) < 2000\n\n  // excessive whitespace\n  or (\n    regex.icontains(body.html.raw, '(?:(?:<br\\s*/?>\\s*){20,}|\\n{20,})')\n    or regex.icontains(body.html.raw, '(?:<p[^>]*>\\s*<br\\s*/?>\\s*</p>\\s*){30,}')\n    or regex.icontains(body.html.raw,\n                       '(?:<p class=\".*?\"><span style=\".*?\"><o:p>&nbsp;</o:p></span></p>\\s*){30,}'\n    )\n    or regex.icontains(body.html.raw, '(?:<p>\\s*&nbsp;\\s*</p>\\s*){7,}')\n    or regex.icontains(body.html.raw, '(?:<p>\\s*&nbsp;\\s*</p>\\s*<br>\\s*){7,}')\n    or regex.icontains(body.html.raw,\n                       '(?:<p[^>]*>\\s*&nbsp;\\s*<br>\\s*</p>\\s*){5,}'\n    )\n    or regex.icontains(body.html.raw, '(?:<p[^>]*>&nbsp;</p>\\s*){7,}')\n  )\n)\n\n// a body link does not match the sender domain\nand any(body.links,\n        .href_url.domain.root_domain != sender.email.domain.root_domain\n        and .href_url.domain.root_domain not in $org_domains\n)\n\n// and no false positives and not solicited\nand (\n  not profile.by_sender().any_false_positives\n  and not profile.by_sender().solicited\n)\n\n// not a reply\nand (\n  length(headers.references) == 0\n  or not any(headers.hops, any(.fields, strings.ilike(.name, \"In-Reply-To\")))\n)\n\n// negate highly trusted sender domains unless they fail DMARC authentication\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and (\n      any(distinct(headers.hops, .authentication_results.dmarc is not null),\n          strings.ilike(.authentication_results.dmarc, \"*fail\")\n      )\n    )\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Natural Language Understanding"
  - "Sender analysis"
id: "5d9c3a75-5f57-5d0c-a07f-0f300bbde076"
testing_pr: 2377
testing_sha: 67bc7932a7195796a5f75301f374c2205fc7ed06
