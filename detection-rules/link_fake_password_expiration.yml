name: "Credential Phishing: Fake Password Expiration from New and Unsolicited sender"
description: "This rule looks for password expiration verbiage in the subject and body. Requiring between 1 - 9 links, a short body, and NLU in addition to statically specified term anchors. High trust senders are also negated."
type: "rule"
severity: "medium"
source: |
  type.inbound
  
  // few links
  and 0 < length(body.links) < 10
  
  // no attachments or suspicious attachment
  and (
    length(attachments) == 0
    or any(attachments,
           .file_type in ("pdf", "doc", "docx")
           and any(file.explode(.),
                   .scan.entropy.entropy > 7 and length(.scan.ocr.raw) < 20
           )
    )
  )
  
  // body contains expire, expiration, loose, lose 
  and (
    regex.icontains(body.current_thread.text,
                    '(expir(e)?(ation|s)|\blo(o)?se\b|office 365|re.{0,3}confirm)|due for update'
    )
    and not strings.icontains(body.current_thread.text, 'link expires in ')
  )
  
  and (
    // subject or body contains account or access
    any([subject.subject, body.current_thread.text],
        regex.icontains(body.current_thread.text, "account|access|your email")
    )
    // suspicious use of recipients email address
    or any(recipients.to,
           strings.icontains(strings.replace_confusables(subject.subject),
                             .email.local_part
           )
           or strings.icontains(strings.replace_confusables(body.current_thread.text
                                ),
                                .email.email
           )
    )
  )
  
  // subject or body must contains password
  and any([
            strings.replace_confusables(subject.subject),
            strings.replace_confusables(body.current_thread.text)
          ],
          regex.icontains(body.current_thread.text, '\bpassword\b')
  )
  and (
    any(ml.nlu_classifier(strings.replace_confusables(body.current_thread.text)).intents,
        .name == "cred_theft" and .confidence == "high"
    )
    or length(filter([
                       "password",
                       "expiration",
                       "expire",
                       "expiring",
                       "kindly",
                       "renew",
                       "review",
                       "click below",
                       "kicked out",
                       "prevent",
                       "required now",
                       "immediate action",
                       "security update",
                       "blocked",
                       "locked",
                       "interruption"
                     ],
                     strings.icontains(strings.replace_confusables(body.current_thread.text
                                       ),
                                       .
                     )
              )
    ) >= 3
  )
  
  // body length between 200 and 2000
  and (
    200 < length(body.current_thread.text) < 2000
    
    // excessive whitespace
    or (
      regex.icontains(body.html.raw, '((<br\s*/?>\s*){20,}|\n{20,})')
      or regex.icontains(body.html.raw, '(<p[^>]*>\s*<br\s*/?>\s*</p>\s*){30,}')
      or regex.icontains(body.html.raw,
                         '(<p class=".*?"><span style=".*?"><o:p>&nbsp;</o:p></span></p>\s*){30,}'
      )
      or regex.icontains(body.html.raw, '(<p>&nbsp;</p>\s*){7,}')
      or regex.icontains(body.html.raw, '(<p>&nbsp;</p><br>\s*){7,}')
      or regex.icontains(body.html.raw, '(<p[^>]*>\s*&nbsp;<br>\s*</p>\s*){5,}')
      or regex.icontains(body.html.raw, '(<p[^>]*>&nbsp;</p>\s*){7,}')
    )
  )
  
  // and no false positives and not solicited
  and (
    not profile.by_sender().any_false_positives
    and not profile.by_sender().solicited
  )
  
  // not a reply
  and (
    length(headers.references) == 0
    or not any(headers.hops, any(.fields, strings.ilike(.name, "In-Reply-To")))
  )
  
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and (
        any(distinct(headers.hops, .authentication_results.dmarc is not null),
            strings.ilike(.authentication_results.dmarc, "*fail")
        )
      )
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )

attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Natural Language Understanding"
  - "Sender analysis"
id: "5d9c3a75-5f57-5d0c-a07f-0f300bbde076"
