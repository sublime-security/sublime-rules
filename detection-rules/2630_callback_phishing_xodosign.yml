name: "Callback Phishing via Xodo Sign comment"
description: "This rule inspects messages originating from legitimate Xodo Sign infrastructure, with content matching Callback Phishing criteria, in the body, requiring at least one brand name, as well as 3 matching Callback Phishing terms and a phone number."
type: "rule"
severity: "high"
source: "type.inbound\nand length(attachments) == 0\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\n  // Legitimate Xodo Sign/Eversign sending infratructure\n  and sender.email.domain.root_domain == 'eversign.com'\n  and (headers.auth_summary.spf.pass or headers.auth_summary.dmarc.pass)\n\nand (\n  // this section is synced with attachment_callback_phish_with_pdf.yml and attachment_callback_phish_with_img.yml\n  regex.icontains(strings.replace_confusables(body.current_thread.text),\n                  '(p.{0,3}a.{0,3}y.{0,3}p.{0,3}a.{0,3}l|ma?c.?fee|n[o0]rt[o0]n|geek.{0,5}squad|ebay|symantec|best buy|lifel[o0]c|secure anywhere|starz|utilities premium|pc security|at&t)'\n  )\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n         .name in (\"PayPal\", \"Norton\", \"GeekSquad\", \"Ebay\", \"McAfee\", \"AT&T\")\n  )\n)\nand length(body.current_thread.text) < 1750\nand (\n  (\n    // this seciton is synced with attachment_callback_phish_with_img.yml and attachment_callback_phish_with_pdf.yml\n    // however, the 3 of logic and requiring a phone number is specific to this rule in order to reduce FPs\n    // caused by messages which mention cancelling or otherwise managing a subscription\n    // it is also synced and below for message_screenshot OCR output\n    3 of (\n      strings.icontains(body.current_thread.text, 'purchase'),\n      strings.icontains(body.current_thread.text, 'payment'),\n      strings.icontains(body.current_thread.text, 'transaction'),\n      strings.icontains(body.current_thread.text, 'subscription'),\n      strings.icontains(body.current_thread.text, 'antivirus'),\n      strings.icontains(body.current_thread.text, 'order'),\n      strings.icontains(body.current_thread.text, 'support'),\n      strings.icontains(body.current_thread.text, 'help line'),\n      strings.icontains(body.current_thread.text, 'receipt'),\n      strings.icontains(body.current_thread.text, 'invoice'),\n      strings.icontains(body.current_thread.text, 'call'),\n      strings.icontains(body.current_thread.text, 'cancel'),\n      strings.icontains(body.current_thread.text, 'renew'),\n      strings.icontains(body.current_thread.text, 'refund'),\n      regex.icontains(body.current_thread.text, \"(?:reach|contact) us at\"),\n      strings.icontains(body.current_thread.text, \"+1\"),\n      strings.icontains(body.current_thread.text, \"amount\"),\n      strings.icontains(body.current_thread.text, \"charged\"),\n      strings.icontains(body.current_thread.text, \"crypto\"),\n      strings.icontains(body.current_thread.text, \"wallet address\"),\n      regex.icontains(body.current_thread.text, '\\$\\d{3}\\.\\d{2}\\b'),\n    )\n    // phone number regex\n    and regex.icontains(body.current_thread.text,\n                        '\\+?([ilo0-9]{1}.)?\\(?[ilo0-9]{3}?\\)?.[ilo0-9]{3}.?[ilo0-9]{4}',\n                        '\\+?([ilo0-9]{1,2})?\\s?\\(?\\d{3}\\)?[\\s\\.\\-⋅]{0,5}[ilo0-9]{3}[\\s\\.\\-⋅]{0,5}[ilo0-9]{4}'\n    )\n  )\n  or (\n    any(file.explode(beta.message_screenshot()),\n        // this seciton is synced with attachment_callback_phish_with_img.yml and attachment_callback_phish_with_pdf.yml\n        // and above for current_thread.text\n        3 of (\n          strings.icontains(.scan.ocr.raw, 'purchase'),\n          strings.icontains(.scan.ocr.raw, 'payment'),\n          strings.icontains(.scan.ocr.raw, 'transaction'),\n          strings.icontains(.scan.ocr.raw, 'subscription'),\n          strings.icontains(.scan.ocr.raw, 'antivirus'),\n          strings.icontains(.scan.ocr.raw, 'order'),\n          strings.icontains(.scan.ocr.raw, 'support'),\n          strings.icontains(.scan.ocr.raw, 'help line'),\n          strings.icontains(.scan.ocr.raw, 'receipt'),\n          strings.icontains(.scan.ocr.raw, 'invoice'),\n          strings.icontains(.scan.ocr.raw, 'call'),\n          strings.icontains(.scan.ocr.raw, 'helpdesk'),\n          strings.icontains(.scan.ocr.raw, 'cancel'),\n          strings.icontains(.scan.ocr.raw, 'renew'),\n          strings.icontains(.scan.ocr.raw, 'refund'),\n          regex.icontains(.scan.ocr.raw, \"(?:reach|contact) us at\"),\n          strings.icontains(.scan.ocr.raw, '+1'),\n          strings.icontains(.scan.ocr.raw, 'amount'),\n          strings.icontains(.scan.ocr.raw, 'charged'),\n          strings.icontains(.scan.ocr.raw, 'crypto'),\n          strings.icontains(.scan.ocr.raw, 'wallet address'),\n          regex.icontains(.scan.ocr.raw, '\\$\\d{3}\\.\\d{2}\\b'),\n        )\n        // phone number regex\n        and regex.icontains(.scan.ocr.raw,\n                            '\\+?([ilo0-9]{1}.)?\\(?[ilo0-9]{3}?\\)?.[ilo0-9]{3}.?[ilo0-9]{4}',\n                            '\\+?([ilo0-9]{1,2})?\\s?\\(?\\d{3}\\)?[\\s\\.\\-⋅]{0,5}[ilo0-9]{3}[\\s\\.\\-⋅]{0,5}[ilo0-9]{4}'\n        )\n\n        // negate messages with previous threads.  While callback phishing with thread hijacking or with current_thread \n        // padded with whitespace and previous threads in the message has been observed, the intetion of using OCR is for image embedded callbacks\n        and not regex.icount(.scan.ocr.raw, '(?:from|to|sent|date|cc|subject):') > 3\n        // this notation of previous threads often only occurs once\n        and not regex.icontains(.scan.ocr.raw, 'wrote:[\\r\\n]')\n    )\n  )\n)\n"
attack_types:
  - "Callback Phishing"
tactics_and_techniques:
  - "Exploit"
  - "Impersonation: Brand"
  - "Out of band pivot"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "Header analysis"
  - "Sender analysis"
  - "URL analysis"
id: "a4caa4e0-b94d-5f1d-99e7-37cd5ba5df91"
og_id: "6f722c5d-ea4b-5fc4-9903-45a6310335e0"
testing_pr: 2630
testing_sha: aafe4700ba34876c4382123e050517d9c0304bfa
