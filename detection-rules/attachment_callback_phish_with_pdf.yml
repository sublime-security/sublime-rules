name: "Attachment: Callback Phishing solicitation via pdf file"
description: "A fraudulent invoice/receipt found in a pdf attachment.\nCallback Phishing is an attempt by an attacker to solicit the victim (recipient) to call a phone number. \nThe resulting interaction could lead to a multitude of attacks ranging from Financial theft, Remote Access Trojan (RAT) Installation or Ransomware Deployment.\n"
type: "rule"
severity: "high"
source: "type.inbound\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\n\n// single attachment\nand length(attachments) == 1\n\n// sender is freemail\nand sender.email.domain.root_domain in $free_email_providers\n\n// the attachment is a pdf with less than 3 pages, and at least 60 ocr chars\nand any(attachments,\n        (\n          .file_extension == \"pdf\"\n          and (\n            // get the length of the attached pdf\n            (\n              any(file.explode(.),\n                  .depth == 0 and .scan.exiftool.page_count < 3\n              )\n              // check that any _single_ result in the file.explode matches these conditions\n              // a second file.explode is required because the OCR is generated at a different depth within \n              // the file.explode results\n              and any(file.explode(.),\n                      length(.scan.ocr.raw) > 60\n                      // 4 of the following strings are found        \n                      and 4 of (\n                        // this section is synced with attachment_callback_phish_with_pdf.yml and body_callback_phishing_no_attachment.yml\n                        strings.icontains(.scan.ocr.raw, \"purchase\"),\n                        strings.icontains(.scan.ocr.raw, \"payment\"),\n                        strings.icontains(.scan.ocr.raw, \"transaction\"),\n                        strings.icontains(.scan.ocr.raw, \"subscription\"),\n                        strings.icontains(.scan.ocr.raw, \"antivirus\"),\n                        strings.icontains(.scan.ocr.raw, \"order\"),\n                        strings.icontains(.scan.ocr.raw, \"support\"),\n                        strings.icontains(.scan.ocr.raw, \"help line\"),\n                        strings.icontains(.scan.ocr.raw, \"receipt\"),\n                        strings.icontains(.scan.ocr.raw, \"invoice\"),\n                        strings.icontains(.scan.ocr.raw, \"call\"),\n                        strings.icontains(.scan.ocr.raw, \"helpdesk\"),\n                        strings.icontains(.scan.ocr.raw, \"cancel\"),\n                        strings.icontains(.scan.ocr.raw, \"renew\"),\n                        strings.icontains(.scan.ocr.raw, \"refund\"),\n                        strings.icontains(.scan.ocr.raw, \"contact us at\"),\n                        strings.icontains(.scan.ocr.raw, \"+1\"),\n                        strings.icontains(.scan.ocr.raw, \"amount\"),\n                        strings.icontains(.scan.ocr.raw, \"charged\"),\n                        strings.icontains(.scan.ocr.raw, \"crypto\"),\n                        strings.icontains(.scan.ocr.raw, \"wallet address\"),\n                        regex.icontains(.scan.ocr.raw, '\\$\\d{3}\\.\\d{2}\\b'),\n                        regex.icontains(.scan.ocr.raw,\n                                        '(\\+\\d|1.(\\()?\\d{3}(\\))?\\D\\d{3}\\D\\d{4})'\n                        ),\n                        regex.icontains(.scan.ocr.raw,\n                                        '\\+?([ilo0-9]{1,2})?\\s?\\(?\\d{3}\\)?[\\s\\.\\-⋅]{0,5}[ilo0-9]{3}[\\s\\.\\-⋅]{0,5}[ilo0-9]{4}'\n                        ),\n                        strings.icontains(.scan.ocr.raw, \"+1\")\n                      )\n                      and (\n                        // this section is synced with attachment_callback_phish_with_img.yml and body_callback_phishing_no_attachment.yml\n                        regex.icontains(.scan.ocr.raw,\n                                        '(p.{0,3}a.{0,3}y.{0,3}p.{0,3}a.{0,3}l|ma?c.?fee|n[o0]rt[o0]n|geek.{0,5}squad|ebay|symantec|best buy|lifel[o0]c|secure anywhere|starz|utilities premium|pc security|at&t)'\n                        )\n                        // suspicious attachment name from the attachment object not file.explode() output\n                        or regex.icontains(..file_name,\n                                           'INV(?:_|\\s)?\\d+(.pdf)$'\n                        )\n                      )\n                      // Negate bank statements\n                      and not (\n                        2 of (\n                          strings.icontains(.scan.ocr.raw, \"opening balance\"),\n                          strings.icontains(.scan.ocr.raw, \"closing balance\"),\n                          strings.icontains(.scan.ocr.raw, \"direct debit\"),\n                          strings.icontains(.scan.ocr.raw, \"interest\"),\n                          strings.icontains(.scan.ocr.raw, \"account balance\"),\n                        )\n                      )\n              )\n            )\n            // this section is synced with attachment_callback_phish_with_img.yml and body_callback_phishing_no_attachment.yml\n            or any(ml.logo_detect(.).brands,\n                   .name in (\n                     \"PayPal\",\n                     \"Norton\",\n                     \"GeekSquad\",\n                     \"Ebay\",\n                     \"McAfee\",\n                     \"AT&T\"\n                   )\n            )\n          )\n        )\n)\nand (\n  (\n    (\n      length(headers.references) > 0\n      or not any(headers.hops,\n                 any(.fields, strings.ilike(.name, \"In-Reply-To\"))\n      )\n    )\n    and not (\n      (\n        strings.istarts_with(subject.subject, \"RE:\")\n        or strings.istarts_with(subject.subject, \"RES:\")\n        or strings.istarts_with(subject.subject, \"R:\")\n        or strings.istarts_with(subject.subject, \"ODG:\")\n        or strings.istarts_with(subject.subject, \"答复:\")\n        or strings.istarts_with(subject.subject, \"AW:\")\n        or strings.istarts_with(subject.subject, \"TR:\")\n        or strings.istarts_with(subject.subject, \"FWD:\")\n        or regex.imatch(subject.subject,\n                        '(\\[[^\\]]+\\]\\s?){0,3}(re|fwd?|automat.*)\\s?:.*'\n        )\n      )\n    )\n  )\n  or (length(headers.references) == 0 or length(body.current_thread.text) < 10)\n)\n"
attack_types:
  - "Callback Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Free email provider"
  - "Out of band pivot"
  - "PDF"
  - "Social engineering"
detection_methods:
  - "Exif analysis"
  - "File analysis"
  - "Optical Character Recognition"
  - "Sender analysis"
id: "ac33f097-af20-554c-b29a-56f21be1b285"
testing_pr: 2418
testing_sha: 5a247bcdbdb790dc71704c24ac4c438a67c40827
