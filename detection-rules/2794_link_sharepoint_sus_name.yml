name: "Link: Suspicious SharePoint Document Name"
description: "The detection rule is intended to match on emails sent from SharePoint indicating a shared file to the recipient that contain suspicious content within the document name.  The Link display text is leveraged to identify the name of the shared file."
type: "rule"
severity: "low"
source: "type.inbound\nand strings.ilike(subject.subject, \"*shared*\", \"*invit*\")\nand strings.ilike(body.current_thread.text,\n                  \"*shared a file with you*\",\n                  \"*shared with you*\",\n                  \"*invited you to access a file*\"\n)\nand not strings.ilike(body.current_thread.text, \"invited you to edit\")\nand (\n  // use the display text of the link to determine the name of the file\n  any(filter(body.links,\n             (\n               .href_url.domain.root_domain == \"sharepoint.com\"\n               or .href_url.domain.root_domain == \"1drv.ms\"\n               // handle urls with mimecast rewriting\n               or (\n                 .href_url.domain.root_domain == 'mimecastprotect.com'\n                 and strings.icontains(.href_url.query_params,\n                                       '.sharepoint.com'\n                 )\n               )\n             )\n             and .display_text != \"Open\"\n      ),\n\n      // the file name does not include lowercase letters, while allowing for non letter chars\n      regex.match(.display_text, '^[^a-z]+$')\n\n      // file sharing service references\n      or strings.icontains(.display_text, 'dropbox')\n      or strings.icontains(.display_text, 'docusign')\n\n      // file name lures\n      // secure theme\n      or regex.icontains(.display_text, 'secured?.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'important.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'shared?.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'protected.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'encrypted.*(?:file|document|docs|fax)')\n\n      // scanner theme\n      or strings.icontains(.display_text, 'scanne[rd]_')\n      // image themed\n      or strings.icontains(.display_text, '_IMG_')\n      or regex.icontains(.display_text, '^IMG[_-](?:\\d|\\W)+$')\n\n      // digits\n      or regex.icontains(.display_text, 'doc(?:ument)?\\s?\\d+$')\n      or regex.icontains(.display_text, '^\\d+$')\n\n      // onedrive theme\n      or strings.icontains(.display_text, 'one_docx')\n      or strings.icontains(.display_text, 'OneDrive')\n      or regex.icontains(.display_text, 'A document.*One.?Drive')\n\n      // action in file name\n      or strings.icontains(.display_text, 'click here')\n      or strings.icontains(.display_text, 'Download PDF')\n      or strings.icontains(.display_text, 'Validate')\n\n      // limited file name to \"confidential\"\n      or .display_text =~ 'Confidentiality'\n      or .display_text =~ 'Confidential'\n\n      // invoice themes\n      or any(ml.nlu_classifier(.display_text).entities, .name == \"financial\")\n      or strings.icontains(.display_text, 'payment')\n      or strings.icontains(.display_text, 'invoice')\n      or regex.icontains(.display_text, 'INV(?:_|\\s)?\\d+$')\n      // starts with INV_ or INV\\x20\n      or regex.icontains(.display_text, '^INV(?:_|\\s)')\n      or regex.icontains(.display_text, 'P[O0]\\W+?\\d+$')\n      or strings.icontains(.display_text, 'receipt')\n      or strings.icontains(.display_text, 'billing')\n      or (\n        strings.icontains(.display_text, 'statement')\n        and not .display_text =~ \"Privacy Statement\"\n      )\n      or strings.icontains(.display_text, 'Past Due')\n      or regex.icontains(.display_text, 'Remit(tance)?')\n      or strings.icontains(.display_text, 'Purchase Order')\n\n      // contract language\n      or strings.icontains(.display_text, 'settlement')\n      or strings.icontains(.display_text, 'contract agreement')\n      or regex.icontains(.display_text, 'Pr[0o]p[0o]sal')\n      or strings.icontains(.display_text, 'contract doc')\n\n      // generic document name AND additional suspicious indicator\n      or (\n          regex.imatch(.display_text, 'documents?')\n          and (\n              // Find the share comment in the HTML and check for reply/forward \"impersonation\"\n              regex.icontains(body.html.raw, '<p style=\"font-size:16px;color:#323130;margin:40px 20px 28px\">(re|fwd?)')\n          )\n      )\n        \n      // Payroll/HR\n      // section also used in abuse_dropbox_sus_names.yml with modified input\n      or strings.icontains(.display_text, 'Payroll')\n      or strings.icontains(.display_text, 'Employee Pay\\b')\n      or strings.icontains(.display_text, 'Salary')\n      or strings.icontains(.display_text, 'Benefit Enrollment')\n      or strings.icontains(.display_text, 'Employee Handbook')\n      or strings.icontains(.display_text, 'Reimbursement Approved')\n      or regex.icontains(.display_text, '(?:Faculty|Staff)\\s*(?:\\w+\\s+){0,3}\\s*Eval(?:uation)?')\n  )\n)\n\n// and it's not an internal share\nand not any(headers.hops,\n            any(.fields,\n                .name == \"X-MS-Exchange-CrossTenant-AuthAs\"\n                and .value == \"Internal\"\n            )\n)\nand (\n  // and sender has never had email sent to them\n  profile.by_sender().solicited == false\n  // often times no-reply is soliticed due to various behaviors\n  or sender.email.email == \"no-reply@sharepointonline.com\"\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Free file host"
  - "Evasion"
detection_methods:
  - "Content analysis"
id: "e79b9a08-2014-5db0-47c0-2b3d9d2b9d7a"
og_id: "f95fee6e-8127-5888-a9a9-4bbeabfe33a3"
testing_pr: 2794
testing_sha: 0f5712c4c2d5e0386e2c61464bbd8e9500611092
