name: "PayPal Invoice Abuse"
description: |
  A fraudulent invoice/receipt found in the body of the message sent by exploiting Paypal's invoicing service.
  Callback Phishing is an attempt by an attacker to solicit the victim (recipient) to call a phone number. 
  The resulting interaction could lead to a multitude of attacks ranging from Financial theft, Remote Access Trojan (RAT) Installation or Ransomware Deployment.
type: "rule"
references:
  - "https://anderegg.ca/2023/02/01/a-novel-paypal-scam"
severity: "medium"
source: |
  type.inbound
  and length(attachments) == 0
  and sender.email.domain.root_domain in (
    "paypal.com",
    "paypal.com.mx",
    "paypal.com.br",
    "paypal.com.ar",
    "paypal.co.uk"
  )
  and (
    strings.ilike(body.html.display_text, "*seller note*")
    or strings.ilike(body.html.display_text, "*Note from *")
    // payment notificiations that are sent to a recipient which is not the mailbox id
    // attempts to include ones amplified via a DL
    or (
      strings.ilike(body.html.display_text, "*You Sent *")
      and all(recipients.to,
              .email.domain.domain not in $org_domains
              and .email.email != mailbox.email.email
      )
    )
    // phone number in subject
    // the subject contains the seller's "name", attacks have been seen with the entire callback text in the seller's name
    or (
      regex.icontains(strings.replace_confusables(subject.subject),
                      '.*\+?([ilo0-9]{1}.)?\(?[ilo0-9]{3}?\)?.[ilo0-9]{3}.?[ilo0-9]{4}.*'
      )
      or regex.icontains(strings.replace_confusables(subject.subject),
                         '.*\+[ilo0-9]{1,3}[ilo0-9]{10}.*'
      )
      or // +12028001238
   regex.icontains(strings.replace_confusables(subject.subject),
                   '.*[ilo0-9]{3}\.[ilo0-9]{3}\.[ilo0-9]{4}.*'
      )
      or // 202-800-1238
   regex.icontains(strings.replace_confusables(subject.subject),
                   '.*[ilo0-9]{3}-[ilo0-9]{3}-[ilo0-9]{4}.*'
      )
      or // (202) 800-1238
   regex.icontains(strings.replace_confusables(subject.subject),
                   '.*\([ilo0-9]{3}\)\s[ilo0-9]{3}-[ilo0-9]{4}.*'
      )
      or // (202)-800-1238
   regex.icontains(strings.replace_confusables(subject.subject),
                   '.*\([ilo0-9]{3}\)-[ilo0-9]{3}-[ilo0-9]{4}.*'
      )
      or ( // 8123456789
        regex.icontains(strings.replace_confusables(subject.subject),
                        '.*8[ilo0-9]{9}.*'
        )
        and regex.icontains(strings.replace_confusables(subject.subject),
                            '\+[1l]'
        )
      )
    )
  )
  and (
    (
      // icontains a phone number
      (
        regex.icontains(strings.replace_confusables(body.current_thread.text),
                        '.*\+?([ilo0-9]{1}.)?\(?[ilo0-9]{3}?\)?.[ilo0-9]{3}.?[ilo0-9]{4}.*\n'
        )
        or regex.icontains(strings.replace_confusables(body.current_thread.text),
                           '.*\+[ilo0-9]{1,3}[ilo0-9]{10}.*\n'
        )
        or // +12028001238
   regex.icontains(strings.replace_confusables(body.current_thread.text),
                   '.*[ilo0-9]{3}\.[ilo0-9]{3}\.[ilo0-9]{4}.*\n'
        )
        or // 202-800-1238
   regex.icontains(strings.replace_confusables(body.current_thread.text),
                   '.*[ilo0-9]{3}-[ilo0-9]{3}-[ilo0-9]{4}.*\n'
        )
        or // (202) 800-1238
   regex.icontains(strings.replace_confusables(body.current_thread.text),
                   '.*\([ilo0-9]{3}\)\s[ilo0-9]{3}-[ilo0-9]{4}.*\n'
        )
        or // (202)-800-1238
   regex.icontains(strings.replace_confusables(body.current_thread.text),
                   '.*\([ilo0-9]{3}\)-[ilo0-9]{3}-[ilo0-9]{4}.*\n'
        )
        or ( // 8123456789
          regex.icontains(strings.replace_confusables(body.current_thread.text),
                          '.*8[ilo0-9]{9}.*\n'
          )
          and regex.icontains(strings.replace_confusables(body.current_thread.text
                              ),
                              '\+[1l]'
          )
        )
      )
      and (
        (
          4 of (
            strings.ilike(body.html.inner_text, '*you did not*'),
            strings.ilike(body.html.inner_text, '*is not for*'),
            strings.ilike(body.html.inner_text, '*done by you*'),
            regex.icontains(body.html.inner_text, "didn\'t ma[kd]e this"),
            strings.ilike(body.html.inner_text, '*Fruad Alert*'),
            strings.ilike(body.html.inner_text, '*Fraud Alert*'),
            strings.ilike(body.html.inner_text, '*fraudulent*'),
            strings.ilike(body.html.inner_text, '*using your PayPal*'),
            strings.ilike(body.html.inner_text, '*subscription*'),
            strings.ilike(body.html.inner_text, '*antivirus*'),
            strings.ilike(body.html.inner_text, '*order*'),
            strings.ilike(body.html.inner_text, '*support*'),
            strings.ilike(body.html.inner_text, '*sincerely apologize*'),
            strings.ilike(body.html.inner_text, '*receipt*'),
            strings.ilike(body.html.inner_text, '*invoice*'),
            strings.ilike(body.html.inner_text, '*Purchase*'),
            strings.ilike(body.html.inner_text, '*transaction*'),
            strings.ilike(body.html.inner_text, '*Market*Value*'),
            strings.ilike(body.html.inner_text, '*BTC*'),
            strings.ilike(body.html.inner_text, '*call*'),
            strings.ilike(body.html.inner_text, '*get in touch with our*'),
            strings.ilike(body.html.inner_text, '*quickly inform*'),
            strings.ilike(body.html.inner_text, '*quickly reach *'),
            strings.ilike(body.html.inner_text, '*detected unusual transactions*'),
            strings.ilike(body.html.inner_text, '*without your authorization*'),
            strings.ilike(body.html.inner_text, '*cancel*'),
            strings.ilike(body.html.inner_text, '*renew*'),
            strings.ilike(body.html.inner_text, '*refund*'),
            strings.ilike(body.html.inner_text, '*+1*'),
            regex.icontains(body.html.inner_text, 'help.{0,3}desk'),
            strings.ilike(body.html.inner_text, '* your funds*'),
            strings.ilike(body.html.inner_text, '* your checking*'),
            strings.ilike(body.html.inner_text, '* your saving*'),
            strings.ilike(body.html.inner_text, '*transfer*'),
            strings.ilike(body.html.inner_text, '*secure your account*'),
            strings.ilike(body.html.inner_text, '*recover your*'),
            strings.ilike(body.html.inner_text, '*unusual activity*'),
            strings.ilike(body.html.inner_text, '*suspicious transaction*'),
            strings.ilike(body.html.inner_text, '*transaction history*'),
            strings.ilike(body.html.inner_text, '*please ignore this*'),
            strings.ilike(body.html.inner_text, '*report activity*'),
  
          )
        )
        or regex.icontains(body.current_thread.text,
                           'note from.{0,50}(?:call|reach|contact|paypal)'
        )
        or any(ml.nlu_classifier(body.current_thread.text).intents,
               .name == "callback_scam"
        )
        or (
          // Unicode confusables words obfuscated in note
          regex.icontains(body.html.inner_text,
                          '\+𝟭|𝗽𝗮𝘆𝗺𝗲𝗻𝘁|𝗛𝗲𝗹𝗽 𝗗𝗲𝘀𝗸|𝗿𝗲𝗳𝘂𝗻𝗱|𝗮𝗻𝘁𝗶𝘃𝗶𝗿𝘂𝘀|𝗰𝗮𝗹𝗹|𝗰𝗮𝗻𝗰𝗲𝗹'
          )
        )
        or strings.ilike(body.html.inner_text, '*kindly*')
      )
    )
  )
attack_types:
  - "BEC/Fraud"
  - "Callback Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Header analysis"
  - "Sender analysis"
id: "0ff7a0d4-164d-5ff1-8765-783fa2008b0f"
