name: "PayPal Invoice Abuse"
description: |
  A fraudulent invoice/receipt found in the body of the message sent by exploiting Paypal's invoicing service.
  Callback Phishing is an attempt by an attacker to solicit the victim (recipient) to call a phone number. 
  The resulting interaction could lead to a multitude of attacks ranging from Financial theft, Remote Access Trojan (RAT) Installation or Ransomware Deployment.
type: "rule"
references:
  - "https://anderegg.ca/2023/02/01/a-novel-paypal-scam"
severity: "medium"
source: |
  type.inbound
  and length(attachments) == 0
  and sender.email.domain.root_domain in (
    "paypal.com",
    "paypal.com.mx",
    "paypal.com.br",
    "paypal.com.ar",
    "paypal.co.uk"
  )
  
  // 
  // This rule makes use of a beta feature and is subject to change without notice
  // using the beta feature in custom rules is not suggested until it has been formally released
  // 
        
  and any(filter(beta.html_xpath(body.html,
                                 // all the tables, which don't have descendant tables, after the first image and before a hr with a footerDivider class that appears after the current table.
                                 // using //text()[normalize-space()] allows us to split each table up by line breaks, so each line can be inspected uniquely 
                                 '//img[@alt="PayPal"]/following::table[not(descendant::table) and count(following::hr[@class="footerDivider"]) > 0]//text()[normalize-space()]'
                 ).nodes,
                 (
                   // icontains a phone number
                   (
                     regex.icontains(strings.replace_confusables(.display_text),
                                     '\b\+?([ilo0-9]{1}.)?\(?[ilo0-9]{3}?\)?.[ilo0-9]{3}.?[ilo0-9]{4}\b'
                     )
                     or regex.icontains(strings.replace_confusables(.display_text),
                                        '\+[ilo0-9]{1,3}[ilo0-9]{10}'
                     )
                     or // +12028001238
   regex.icontains(strings.replace_confusables(.display_text),
                   '[ilo0-9]{3}\.[ilo0-9]{3}\.[ilo0-9]{4}'
                     )
                     or // 202-800-1238
   regex.icontains(strings.replace_confusables(.display_text),
                   '[ilo0-9]{3}-[ilo0-9]{3}-[ilo0-9]{4}'
                     )
                     or // (202) 800-1238
   regex.icontains(strings.replace_confusables(.display_text),
                   '\([ilo0-9]{3}\)\s[ilo0-9]{3}-[ilo0-9]{4}'
                     )
                     or // (202)-800-1238
   regex.icontains(strings.replace_confusables(.display_text),
                   '\([ilo0-9]{3}\)-[ilo0-9]{3}-[ilo0-9]{4}'
                     )
                     or ( // 8123456789
                       regex.icontains(strings.replace_confusables(.display_text),
                                       '8[ilo0-9]{9}'
                       )
                       and regex.icontains(strings.replace_confusables(.display_text
                                           ),
                                           '\+[1l]'
                       )
                     )
                   )
                 )
                 // main customer service number
                 and not strings.icontains(.display_text, '888-221-1161')
                 // credit services number
                 and not strings.icontains(.display_text, '844-896-4937')
                 // pay in 4 number
                                and not strings.icontains(.display_text, '(800) 504-7534')
  
                 and not regex.icontains(.display_text, "Transaction (date|ID)\n")
          ),
          (
            2 of (
              strings.ilike(.display_text, '*you did not*'),
              strings.ilike(.display_text, '*Critical Alert'),
              strings.ilike(.display_text, '*is not for*'),
              strings.ilike(.display_text, '*done by you*'),
              strings.ilike(.display_text, "*don\'t recognize this seller*"),
              regex.icontains(.display_text, "didn\'t ma[kd]e this"),
              regex.icontains(.display_text, "was.*made by you"),
              strings.ilike(.display_text, '*Fruad Alert*'),
              strings.ilike(.display_text, '*Fraud Alert*'),
              strings.ilike(.display_text, '*fraudulent*'),
              strings.ilike(.display_text, '*using your PayPal*'),
              strings.ilike(.display_text, '*subscription*'),
              strings.ilike(.display_text, '*antivirus*'),
              strings.ilike(.display_text, '*support*'),
              strings.ilike(.display_text, '*sincerely apologize*'),
              strings.ilike(.display_text, '*receipt*'),
              strings.ilike(.display_text, '*invoice*'),
              strings.ilike(.display_text, '*Purchase*'),
              strings.ilike(.display_text, '*Market*Value*'),
              strings.ilike(.display_text, '*BTC*'),
              strings.ilike(.display_text, '*get in touch with our*'),
              strings.ilike(.display_text, '*quickly inform*'),
              strings.ilike(.display_text, '*quickly reach *'),
              strings.ilike(.display_text, '*detected unusual transactions*'),
              strings.ilike(.display_text, '*without your authorization*'),
              strings.ilike(.display_text, '*unauthorized activitiy*'),
              strings.ilike(.display_text, '*unauthorized transaction*'),
              strings.ilike(.display_text, '*cancel*'),
              strings.ilike(.display_text, '*renew*'),
              strings.ilike(.display_text, '*refund*'),
              regex.icontains(.display_text, 'help.{0,3}desk'),
              strings.ilike(.display_text, '* your funds*'),
              strings.ilike(.display_text, '* your checking*'),
              strings.ilike(.display_text, '* your saving*'),
              strings.ilike(.display_text, '*transfer*'),
              strings.ilike(.display_text, '*secure your account*'),
              strings.ilike(.display_text, '*recover your*'),
              strings.ilike(.display_text, '*unusual activity*'),
              strings.ilike(.display_text, '*suspicious transaction*'),
              strings.ilike(.display_text, '*transaction history*'),
              strings.ilike(.display_text, '*please ignore this*'),
              strings.ilike(.display_text, '*report activity*'),
              regex.icontains(.display_text, '(?:call|reach|contact|get in touch).*paypal')
            )
          )
          // Unicode confusables words obfuscated in note
          or regex.icontains(.display_text, '\+𝟭|𝗽𝗮𝘆𝗺𝗲𝗻𝘁|𝗛𝗲𝗹𝗽 𝗗𝗲𝘀𝗸|𝗿𝗲𝗳𝘂𝗻𝗱|𝗮𝗻𝘁𝗶𝘃𝗶𝗿𝘂𝘀|𝗰𝗮𝗹𝗹|𝗰𝗮𝗻𝗰𝗲𝗹')
          or strings.ilike(.display_text, '*kindly*')
  )
attack_types:
  - "BEC/Fraud"
  - "Callback Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Header analysis"
  - "Sender analysis"
id: "0ff7a0d4-164d-5ff1-8765-783fa2008b0f"
