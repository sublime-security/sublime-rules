name: "Attachment: EML with Suspicious Indicators"
description: "Attached EML contains suspicious indicators, such as a missing sender email or short HTML body."
type: "rule"
severity: "medium"
source: |
  type.inbound
  and length(attachments) == 1
  and any(attachments,
          (.file_extension == "eml" or .content_type == "message/rfc822")
          and (
            // suspicious indicators
            file.parse_eml(.).sender.email.email == ""
            or length(file.parse_eml(.).body.html.raw) < 10
            or length(file.parse_eml(.).headers.hops) < 2
          )
          and not (
            all(file.parse_eml(.).body.links,
                .href_url.domain.root_domain in ("aka.ms", "office365.com")
                or .href_url.url == "#additionalatt"
            )
            and strings.icontains(file.parse_eml(.).body.current_thread.text,
                                  "We’re making sure your attachments are safe"
            )
          )
          and file.parse_eml(.).sender.email.domain.root_domain not in $org_domains
  )
  // not a thread, or a fake thread
  and (
    not (
      (
        strings.istarts_with(subject.subject, "RE:")
        or strings.istarts_with(subject.subject, "FW:")
        or strings.istarts_with(subject.subject, "FWD:")
        or strings.istarts_with(subject.subject, "Automatic reply:")
        or regex.imatch(subject.subject,
                        '(\[[^\]]+\]\s?){0,3}(re|fwd?|automat.*)\s?:.*'
        )
      )
      and (
        length(headers.references) > 0
        or any(headers.hops, any(.fields, strings.ilike(.name, "In-Reply-To")))
      )
    )
    // fake thread
    or (
      (
        (
          strings.istarts_with(subject.subject, "RE:")
          or strings.istarts_with(subject.subject, "FW:")
          or strings.istarts_with(subject.subject, "FWD:")
          or regex.imatch(subject.subject,
                          '(\[[^\]]+\]\s?){0,3}(re|fwd?|automat.*)\s?:.*'
          )
        )
      )
      // fake thread, but no indication in the subject line
      // current_thread pulls the recent thread, but the full body contains the fake "original" email
      or (
        not (
          (
            strings.istarts_with(subject.subject, "RE:")
            or strings.istarts_with(subject.subject, "R:")
            or strings.istarts_with(subject.subject, "ODG:")
            or strings.istarts_with(subject.subject, "答复:")
            or strings.istarts_with(subject.subject, "AW:")
            or strings.istarts_with(subject.subject, "TR:")
            or strings.istarts_with(subject.subject, "FWD:")
          )
        )
        and any([body.current_thread.text, body.html.display_text, body.plain.raw],
                3 of (
                  strings.icontains(., "from:"),
                  strings.icontains(., "to:"),
                  strings.icontains(., "sent:"),
                  strings.icontains(., "date:"),
                  strings.icontains(., "cc:"),
                  strings.icontains(., "subject:")
                )
        )
        and (
          length(body.current_thread.text) + 100 < length(body.html.display_text)
        )
      )
    )
  )
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
  
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )

attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Evasion"
  - "HTML smuggling"
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "File analysis"
id: "deb5d08d-92b7-5f7b-a7b0-e5053221c2f5"
