name: "Credential Phishing: Fake Security Login Alert (Generic)"
description: "Detects phishing attempts that claim suspicious login activity or unusual sign-in attempts regardless of brand"
type: "rule"
severity: "medium"
source: "type.inbound\n\n// Subject contains security alert language\nand regex.icontains(subject.subject,\n                   \"unusual login|unusual sign|login attempt|sign.?in attempt|suspicious sign|unusual activity|security alert\")\n\n// Body contains security alert language\nand regex.icontains(body.current_thread.text,\n                   \"detect.*login|unusual.*login|suspicious.*login|login attempt|unusual sign|IP Address|Location|don't recognize|security|verify.*account|suspicious activity\")\n\n// Link with suspicious display text\nand any(body.links,\n       regex.icontains(.display_text, \n                      \"sign in|log in|login|verify|continue|account|confirm\")\n)\n\n// Link domains don't match sender\nand any(body.links,\n       .href_url.domain.root_domain != sender.email.domain.root_domain\n       and .href_url.domain.root_domain not in $org_domains\n)\n\n// Check for NLU credential theft intent\nand any(ml.nlu_classifier(body.current_thread.text).intents,\n        .name == \"cred_theft\" and .confidence in (\"medium\", \"high\")\n)\n\n// Explicit negations for known legitimate security alert senders\nand not (\n  regex.icontains(sender.email.domain.domain, \n                 \"lastpass.com|teachable.com|accountprotection.microsoft.com|notificationservices.org\")\n  and headers.auth_summary.spf.pass\n)\n\n// Sender profile checks\nand (\n  (\n    profile.by_sender().prevalence in (\"new\", \"outlier\")\n    and not profile.by_sender().solicited\n  )\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\n\n// Stricter negation for high trust domains - must pass both SPF and DMARC\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and (\n      not headers.auth_summary.dmarc.pass\n      or not headers.auth_summary.spf.pass\n    )\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\n\n// Stronger senders of concern - limit to these patterns for common phishing sources\nand (\n  regex.icontains(sender.display_name, \n                 \"Amazon|Microsoft|Meta|Facebook|Twitter|X|Chase|Wells Fargo|Bank|Metamask|Coinbase|AWS|Adobe|Navan|MEXC|Google\")\n  or regex.icontains(sender.email.local_part, \n                    \"support|security|no[-_]?reply|secure|alert|service|admin|help|info|account\")\n  or (\n    regex.icontains(sender.email.domain.domain, \n                    \"service|security|support|alert|secure|admin|google|microsoft|amazon\")\n    and not regex.icontains(sender.email.domain.domain, \"notificationservice\")\n  )\n)\n\n// Make sure the link URL pattern is suspicious (not just matching domain mismatch)\nand any(body.links,\n       (\n         regex.icontains(.href_url.url, \n                        \"login|auth|sign|verify|account|secure|confirm|token|session|password\")\n         or .href_url.domain.root_domain in $url_shorteners\n       )\n       or regex.icontains(.display_text, \"log into my account\")\n)\n\n// Negate replies\nand (\n  length(headers.references) == 0\n  or not any(headers.hops, any(.fields, strings.ilike(.name, \"In-Reply-To\")))\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Natural Language Understanding"
  - "Sender analysis"
  - "URL analysis"
id: "9fbdd60b-8f1b-52b2-9a55-c3f0b5e86c6d"
testing_pr: 2498
testing_sha: 5fbfa1b8e514be0fbc0b7b91b16665a8b2499423
