name: "Brand impersonation: DocuSign branded attachment lure with no DocuSign links"
description: "Detects DocuSign phishing messages with no DocuSign links, a DocuSign logo or verbage within an image or PDF attachment, from an untrusted sender."
type: "rule"
severity: "high"
source: |
  type.inbound
  and (
    (
      0 < length(attachments) <= 8
      and length(filter(attachments, .file_type in $file_types_images)) > 0
    )
    or (
      length(attachments) > 0
      and all(attachments,
              .file_type in $file_types_images or .file_type == 'pdf'
      )
    )
  )
  and (
    // if there are links, ensure they are not docusign links
    (
      length(body.links) != 0
      and any(body.links,
              not strings.ilike(.href_url.domain.root_domain, "docusign.*")
      )
    )
    // sometimes there are no body links and it's all in the PDF attachment
    or length(body.links) == 0
  )
  and (
    // check the image or pdf attachments for Docusign 
    any(filter(attachments,
               .file_type in $file_types_images or .file_type == 'pdf'
        ),
        (
          any(ml.logo_detect(.).brands, .name == "DocuSign")
          or any(file.explode(.),
                 strings.ilike(.scan.ocr.raw, "*DocuSign*")
                 and (
                   any(ml.nlu_classifier(.scan.ocr.raw).intents,
                       .name == "cred_theft" and .confidence != "low"
                   )
                   or (
                     regex.icontains(.scan.ocr.raw,
                                     "((re)?view|access|complete(d)?) document(s)?",
                                     '[^d][^o][^cd][^ue]sign(?:\b|ature)',
                                     "important edocs",
                                     // German (Document (check|check|sign|sent))
                                     "Dokument (überprüfen|prüfen|unterschreiben|geschickt)",
                                     // German (important|urgent|immediate)
                                     "(wichtig|dringend|sofort)"
                     )
                     and not strings.count(.scan.ocr.raw, "\n\n\n\n\n\n\n\n\n\n") > 3
                   )
                 )
          )
        )
        and not any(file.explode(.),
                    strings.ilike(.scan.ocr.raw, "*DocuSign Envelope ID*")
                    or (
                      .depth == 0
                      and .scan.exiftool.page_count > 10
                      and length(.scan.strings.strings) > 8000
                    )
        )
    )

    // accomidate truncated pngs and GIF files which can cause logodetect/OCR failures
    or any(attachments,
           (
             .file_type =~ "gif"
             or any(file.explode(.),
                    any(.scan.exiftool.fields,
                        .key == "Warning" and .value == "Truncated PNG image"
                    )
             )
           )
           and (
             any(ml.logo_detect(beta.message_screenshot()).brands,
                 (
                   .name == "DocuSign"
                   or any(file.explode(beta.message_screenshot()),
                          strings.ilike(.scan.ocr.raw, "*DocuSign*")
                   )
                 )
             )
             and (
               any(file.explode(beta.message_screenshot()),
                   (
                     any(ml.nlu_classifier(.scan.ocr.raw).intents,
                         .name == "cred_theft" and .confidence != "low"
                     )
                     or regex.icontains(.scan.ocr.raw,
                                        "((re)?view|access|complete(d)?) document(s)?",
                                        "[^d][^o][^c][^u]sign",
                                        "important edocs",
                                        // German (Document (check|check|sign|sent))
                                        "Dokument (überprüfen|prüfen|unterschreiben|geschickt)",
                                        // German (important|urgent|immediate)
                                        "(wichtig|dringend|sofort)"
                     )
                   )
               )
             )
             and not any(file.explode(beta.message_screenshot()),
                         (
                           strings.ilike(.scan.ocr.raw, "*DocuSigned By*")
                           and not strings.ilike(.scan.ocr.raw,
                                                 "*DocuSign Envelope ID*"
                           )
                         )
             )
           )
    )
  )
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
  and not profile.by_sender().any_false_positives

  // negate docusign 'via' messages
  and not (
    any(headers.hops,
        any(.fields,
            .name == "X-Api-Host" and strings.ends_with(.value, "docusign.net")
        )
    )
    and strings.contains(sender.display_name, "via")
  )
  
  // negate docusign originated emails
  and not any(headers.hops,
              regex.imatch(.received.server.raw, ".+.docusign.(net|com)")
  )
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "Header analysis"
  - "Natural Language Understanding"
  - "Optical Character Recognition"
  - "Sender analysis"
  - "URL screenshot"
id: "814a5694-d626-5bf4-a1ba-a1dbcb625279"
