name: "Fake email quarantine notification"
description: "Detects phishing messages implying that emails have been delayed or blocked, prompting users to view, release, or delete pending messages."
type: "rule"
severity: "high"
source: |
  type.inbound

  and length(body.links) < 10
  and (
    any(ml.nlu_classifier(body.current_thread.text).intents,
        .name == "cred_theft" and .confidence == "high"
    )
    or (
      length(body.current_thread.text) < 250
      and any(recipients.to,
              strings.icontains(body.current_thread.text, .email.domain.sld)
              or strings.icontains(body.current_thread.text, .email.local_part)
      )
    )
  )
  and (
    3 of (
      strings.ilike(body.current_thread.text, "*review*"),
      strings.ilike(body.current_thread.text, "*release*"),
      strings.ilike(body.current_thread.text, "*quaratine*"),
      strings.ilike(body.current_thread.text, "*messages*"),
      strings.ilike(body.current_thread.text, "*blocked*"),
      strings.ilike(body.current_thread.text, "*notification*"),
      strings.ilike(body.current_thread.text, "*kindly*"),
      strings.ilike(body.current_thread.text, "*on hold*"),
      strings.ilike(body.current_thread.text, "*pending*")
    )
  )
  and (
    any(body.links,
        regex.icontains(.display_text, "view", "release", "messages", "delete")
    )
    or (
      length(body.links) < 3
      and any(body.links,
              any(recipients.to,
                  .email.domain.root_domain == ..display_url.domain.root_domain
                  and ..mismatched
              )
      )
    )
  )
  and not any(body.links,
        regex.icontains(.display_text, "view document")
  )
  and sender.email.domain.root_domain not in (
    "bing.com",
    "microsoft.com",
    "microsoftonline.com",
    "microsoftsupport.com",
    "microsoft365.com",
    "office.com",
    "office365.com",
    "onedrive.com",
    "sharepointonline.com",
    "yammer.com",
    "ppops.net"
  )
  
  // negate org domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $org_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $org_domains
  )
  
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  and not profile.by_sender().solicited
  and not profile.by_sender().any_false_positives
  
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Natural Language Understanding"
  - "Sender analysis"
id: "73f26a3d-b7a5-5b85-83e6-45f1b40f78fb"
