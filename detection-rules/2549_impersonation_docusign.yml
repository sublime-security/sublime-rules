name: "Brand impersonation: DocuSign"
description: |
  Attack impersonating a DocuSign request for signature.
references:
  - "https://playground.sublimesecurity.com?id=2d2c6472-fabb-4952-b902-573a6294aa2f"
type: "rule"
severity: "high"
source: "type.inbound\nand (\n  // orgs can have docusign.company.com\n  strings.ilike(sender.email.email, '*docusign.net*', '*docusign.com*')\n\n  // if the above is true, you'll see a \"via Docusign\"\n  or strings.ilike(sender.display_name, '*docusign*')\n\n  // detects 1 character variations,\n  // such as DocuSlgn (with an \"L\" instead of an \"I\")\n  or strings.ilevenshtein(sender.display_name, \"docusign\") == 1\n  or strings.ilike(sender.display_name, \"*docuonline*\", \"*via *signature*\")\n  or (\n    strings.istarts_with(body.html.inner_text, \"docusign\")\n    and not strings.istarts_with(body.current_thread.text, \"docusign\")\n  )\n  or (\n    (\n      (\n        regex.icontains(sender.display_name, '\\bdocu\\b')\n        and strings.icontains(sender.display_name, 'sign')\n      )\n      or (\n        regex.icontains(subject.subject, '\\bdocu\\b')\n        and strings.icontains(subject.subject, 'sign')\n      )\n      or regex.icontains(body.current_thread.text, '\\bdocu.?sign\\b')\n      or regex.icontains(body.html.raw, 'Powered by.{0,4}</div>\\s*</td>\\s*<td>\\s*<img[^\\>]+(?:src=\"https://docucdn-a.akamaihd.net/[^\\\"]+email-logo.png\"|alt=\"DocuSign\")')\n    )\n    and any(body.links,\n            regex.icontains(.display_text, '(?:Re)?view.*Document', '(?:Re)?view.*Sign')\n    )\n    // negate replies/forwards which involve a legit docusign message-id format\n    and not any(headers.references,\n                strings.iends_with(., '@docusign.net')\n                and regex.imatch(., '[0-9a-f]{32}@docusign.net')\n    )\n  )\n  or (\n    (\n      regex.icontains(body.html.raw, '<font size=\"[0-9]\"[^\\>]*>DocuSign</font>')\n      or regex.icontains(body.html.raw, '\\nDocu(?:<[^\\>]+>\\s*)+Sign<')\n      or regex.icontains(body.html.raw,\n                         '<span[^>]*style=\"[^\"]*\">Docu.?Sign<\\/span>'\n      )\n      or regex.icontains(body.html.raw, '<h1[^\\>]*>\\s*Docu.?Sign')\n      or regex.icontains(body.html.raw,\n                         '<span[^>]*style=\"[^\"]*\">(Docu|D(?:ocu?)?)<\\/span><span[^>]*style=\"[^\"]*\">(Sign|S(?:ign?)?)<\\/span>'\n      )\n      or regex.icontains(body.html.raw, '<strong>Docu.?Sign</strong>')\n      or regex.icontains(body.html.raw, '<div class=\"logo\">DocuSign</div>')\n\n      // Basic variations with HTML encoding\n      // use of regex extract allows \n      or any(regex.iextract(body.html.raw,\n                            '(?:D|&#68;|&#x44;)(?:&#?[0-9a-fA-F]{2,6};|\\s|o|о|&#1086;|&#x43e;)(?:&#?[0-9a-fA-F]{2,6};|\\s|c|с|&#1089;|&#x441;)u(?:&#?[0-9a-fA-F]{2,6};|\\s)?S(?:&#?[0-9a-fA-F]{2,6};|\\s|i|і|&#1110;|&#x456;)(?:&#?[0-9a-fA-F]{2,6};|\\s|g|ɡ|&#609;|&#x261;)(?:n|&#110;|&#x6e;)'\n             ),\n             .full_match !~ \"docusign\"\n      )\n      //  Common homograph patterns\n      or any(regex.iextract(body.html.raw,\n                            '(?:[DⅮᎠᗞᗡ\U0001D403\U0001D437\U0001D46B\U0001D49F\U0001D4D3\U0001D507\U0001D53B\U0001D56F\U0001D5A3])\\s*(?:[oοоօ0Ооʘ◯])\\s*(?:[cсçҫ¢ϲС])\\s*u\\s*(?:[sѕЅ5$])\\s*(?:[iіІ1l!|])\\s*(?:[gǵġģ9ɡ])\\s*(?:[nոռℼη\U0001D427\U0001D45B\U0001D48F\U0001D4C3\U0001D4F7\U0001D52B\U0001D55F\U0001D593])'\n             ),\n             .full_match !~ \"docusign\"\n      )\n\n      // Look for HTML entities for each letter in sequence\n      or any(regex.iextract(body.html.raw,\n                            '(?:D|&#68;|&#x44;)(?:o|о|&#111;|&#x6f;|&#1086;|&#x43e;|&#959;|&#x3bf;)(?:c|с|&#99;|&#x63;|&#1089;|&#x441;|&#1010;|&#231;|&#x67;|&#265;|&#x109;)(?:u|&#117;|&#x75;|&#1091;|&#x443;|&#965;|&#x3c5;)(?:s|&#115;|&#x73;|&#1109;|&#x455;)(?:i|і|&#105;|&#x69;|&#1110;|&#x456;|&#305;|&#x131;)(?:g|&#103;|&#x67;|&#609;|&#x261;|&#287;|&#x11f;)(?:n|&#110;|&#x6e;|&#1085;|&#x43d;|&#951;|&#x3b7;)'\n             ),\n             .full_match !~ \"docusign\"\n      )\n\n      // Handle repeated HTML entities and variation selectors (using Unicode class)                           \n      or any(regex.iextract(body.html.raw,\n                            'D(?:&#[0-9]{1,7};)*\\p{Mn}*o(?:&#[0-9]{1,7};)*\\p{Mn}*c(?:&#[0-9]{1,7};)*\\p{Mn}*u(?:&#[0-9]{1,7};)*\\p{Mn}*[Ss](?:&#[0-9]{1,7};)*\\p{Mn}*i(?:&#[0-9]{1,7};)*\\p{Mn}*g(?:&#[0-9]{1,7};)*\\p{Mn}*n'\n             ),\n             .full_match !~ \"docusign\"\n      )\n    )\n    and (\n      regex.icontains(body.html.raw,\n                      'b(?:ackground(?:-color)?|g?color):\\s*rgb\\(30,\\s*76,\\s*161\\)'\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color):\\s*rgb\\(30,\\s*76,\\s*161\\)'\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color):\\s*rgb\\(61,\\s*170,\\s*73\\)'\n      )\n      or regex.icontains(body.html.raw,\n                         '<(?:div|td|table)[^>]*b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#1e4ca1[^>]*>',\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#214e9f'\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#3260a7'\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#0056b3'\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#1e4ca1'\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#214395'\n      )\n      or regex.icontains(body.html.raw,\n                         'b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#325bb8'\n      )\n      or regex.icontains(body.html.raw,\n                         '<table[^>]*style=\"[^\"]*b(?:ackground(?:-color)?|g?color)(?::|=)\\s*\\\"?#1E4CA1[^\"]*\"[^>]*>(.*?)<\\/table>'\n      )\n      or regex.icontains(body.html.raw, '<title>Document.{0,50}</title>')\n      or any(body.links, regex.icontains(.display_text, 'view.{0,3}doc'))\n      or any(body.links, regex.contains(.display_text, '\\bDOCUMENT'))\n    )\n  )\n)\n\n// identifies the main CTA in the email, eg \"Review now\" or \"Review document\"\n// this should always be a known docusign domain,\n// even with branded docusign subdomains\nand (\n  any(body.links,\n      // we've observed invisible characters in the display name\n      // such as U+034f(look carefully): \"Revi͏ew Now\"\n      (\n        strings.ilevenshtein(.display_text, \"Review Now\") <= 3\n        or strings.ilevenshtein(.display_text, \"Review and Sign\") <= 3\n        or (\n          strings.icontains(.display_text, \"Review\")\n          and not strings.icontains(.display_text, \"Review Us\")\n        )\n        or strings.icontains(.display_text, \"Now\")\n        or strings.icontains(.display_text, \"document\")\n        or strings.icontains(.display_text, \"docusign\")\n      )\n      and not .href_url.domain.root_domain in (\"docusign.com\", \"docusign.net\")\n      and not (\n        .href_url.domain.root_domain == \"mimecastprotect.com\"\n        and (\n          .href_url.query_params is not null\n          and (\n            regex.icontains(.href_url.query_params,\n                            'domain=(?:\\w+.)?docusign.net'\n            )\n            or regex.icontains(.href_url.query_params,\n                               'domain=(?:\\w+.)?docusign.com'\n            )\n          )\n        )\n      )\n  )\n  // Suspicious attachment\n  or any(attachments,\n         (\n           .file_extension in~ (\"html\", \"htm\", \"shtml\", \"dhtml\")\n           or .file_extension in~ $file_extensions_common_archives\n           or .file_type == \"html\"\n           or .content_type == \"text/html\"\n         )\n         and 1 of (\n           (\n             regex.icontains(file.parse_html(.).raw, '\\s{0,}<script.*')\n             and regex.icontains(file.parse_html(.).raw, \"</script>\")\n           ),\n           strings.ilike(file.parse_html(.).raw,\n                         \"*createElement*\",\n                         \"*appendChild*\",\n                         \"*createObjectURL*\"\n           ),\n           strings.icount(file.parse_html(.).raw, \"/*\") > 10,\n           any($free_subdomain_hosts, strings.icontains(..file_name, .))\n         )\n  )\n)\n\n// negate highly trusted sender domains unless they fail DMARC authentication\nand (\n  coalesce(sender.email.domain.root_domain in $high_trust_sender_root_domains\n           and not headers.auth_summary.dmarc.pass,\n           false\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\n\n// adding negation for messages originating from docusigns api\n// and the sender.display.name contains \"via\"\nand not (\n  any(headers.hops,\n      any(.fields,\n          .name == \"X-Api-Host\" and strings.ends_with(.value, \"docusign.net\")\n      )\n  )\n  and strings.contains(sender.display_name, \"via\")\n)\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Lookalike domain"
  - "Social engineering"
  - "Spoofing"
detection_methods:
  - "Header analysis"
  - "Sender analysis"
  - "URL analysis"
id: "59c015e9-d5aa-5888-2e26-5f16265b09fb"
og_id: "4d29235c-08b9-5f9b-950e-60b05c4691fb"
testing_pr: 2549
testing_sha: 4310c9bbcfd5dff194f38b96525014c64575d0b6
