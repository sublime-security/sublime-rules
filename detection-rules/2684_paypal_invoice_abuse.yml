name: "PayPal Invoice Abuse"
description: "A fraudulent invoice/receipt found in the body of the message sent by exploiting Paypal's invoicing service.\nCallback Phishing is an attempt by an attacker to solicit the victim (recipient) to call a phone number. \nThe resulting interaction could lead to a multitude of attacks ranging from Financial theft, Remote Access Trojan (RAT) Installation or Ransomware Deployment.\n"
type: "rule"
references:
  - "https://anderegg.ca/2023/02/01/a-novel-paypal-scam"
severity: "medium"
source: "type.inbound\nand length(attachments) == 0\nand sender.email.domain.root_domain in (\n  \"paypal.com\",\n  \"paypal.com.mx\",\n  \"paypal.com.br\",\n  \"paypal.com.ar\",\n  \"paypal.co.uk\"\n)\nand any(filter(beta.html_xpath(body.html,\n                               // all the tables, which don't have descendant tables, after the first image and before a hr with a footerDivider class that appears after the current table.\n                               // using //text()[normalize-space()] allows us to split each table up by line breaks, so each line can be inspected uniquely \n                               '//img[@alt=\"PayPal\"]/following::table[not(descendant::table) and count(following::hr[@class=\"footerDivider\"]) > 0]//text()[normalize-space()]'\n               ).nodes,\n               (\n                 // icontains a phone number\n                 (\n                   regex.icontains(strings.replace_confusables(.display_text),\n                                   '\\b\\+?([ilo0-9]{1}.)?\\(?[ilo0-9]{3}?\\)?.[ilo0-9]{3}.?[ilo0-9]{4}\\b'\n                   )\n                   or regex.icontains(strings.replace_confusables(.display_text),\n                                      '\\+[ilo0-9]{1,3}[ilo0-9]{10}'\n                   )\n                   or // +12028001238\n regex.icontains(strings.replace_confusables(.display_text),\n                 '[ilo0-9]{3}\\.[ilo0-9]{3}\\.[ilo0-9]{4}'\n                   )\n                   or // 202-800-1238\n regex.icontains(strings.replace_confusables(.display_text),\n                 '[ilo0-9]{3}-[ilo0-9]{3}-[ilo0-9]{4}'\n                   )\n                   or // (202) 800-1238\n regex.icontains(strings.replace_confusables(.display_text),\n                 '\\([ilo0-9]{3}\\)\\s[ilo0-9]{3}-[ilo0-9]{4}'\n                   )\n                   or // (202)-800-1238\n regex.icontains(strings.replace_confusables(.display_text),\n                 '\\([ilo0-9]{3}\\)-[ilo0-9]{3}-[ilo0-9]{4}'\n                   )\n                   or ( // 8123456789\n                     regex.icontains(strings.replace_confusables(.display_text),\n                                     '8[ilo0-9]{9}'\n                     )\n                     and regex.icontains(strings.replace_confusables(.display_text\n                                         ),\n                                         '\\+[1l]'\n                     )\n                   )\n                 )\n               )\n               // filter out elements which contain non actor controlled details\n               // this often wording from paypal templates that might contain phone numbers\n               // but are not elements that are actor controlled. \n\n               // main customer service number\n               and not strings.icontains(.display_text, '888-221-1161')\n               // credit services number\n               and not strings.icontains(.display_text, '844-896-4937')\n               // pay in 4 number\n               and not strings.icontains(.display_text, '(800) 504-7534')\n               // often the transcation id looks like a phone number and matches the regex\n               and not regex.icontains(.display_text, \"Transaction (date|ID)\\n\")\n               // this segment can include phone numbers, but the wording is not actor controlled and shows up \"under the fold\" in the templates\n               and not strings.istarts_with(.display_text, \"If you have any questions about this payment, you can\")\n        ),\n        strings.icontains(.display_text, \"you did not\")\n        or strings.icontains(.display_text, \"Critical Alert\")\n        or strings.icontains(.display_text, \"is not for\")\n        or strings.icontains(.display_text, \"done by you\")\n        or regex.icontains(.display_text, \"don['’]t recognize\")\n        or regex.icontains(.display_text, \"didn['’]t (?:ma[kd]e|place) this\")\n        or regex.icontains(.display_text, \"[wh]as.*placed by you\")\n        or strings.icontains(.display_text, \"issue with\")\n        or regex.icontains(.display_text, \"was.*made by you\")\n        or (\n          strings.icontains(.display_text, \"Fraud\")\n          and strings.icontains(.display_text, \"Alert\")\n        )\n        or strings.icontains(.display_text, \"fraudulent\")\n        or strings.icontains(.display_text, \"using your PayPal\")\n        or strings.icontains(.display_text, \"subscription\")\n        or strings.icontains(.display_text, \"antivirus\")\n        or strings.icontains(.display_text, \"support\")\n        or strings.icontains(.display_text, \"sincerely apologize\")\n        or strings.icontains(.display_text, \"receipt\")\n        // pull in common wording from transaction types from paypal\n        // this wording should be part of the template and not actor controlled\n        // but is generally prepended or appended with actor controlled elements\n        // such as using the business name to deliver callback details\n        // when a phone number is present \n        or strings.icontains(.display_text, \"sent you an invoice\")\n        or strings.icontains(.display_text, \"a money request\")\n        or strings.icontains(.display_text, \"invited you as a developer\")\n\n        // \n        or strings.icontains(.display_text, \"Purchase\")\n        or strings.icontains(.display_text, \"Market*Value\")\n        or strings.icontains(.display_text, \"BTC\")\n        or strings.icontains(.display_text, \"Etherium (ETH)\")\n        or strings.icontains(.display_text, \"get in touch with our\")\n        or strings.icontains(.display_text, \"quickly inform\")\n        or strings.icontains(.display_text, \"quickly reach \")\n        or strings.icontains(.display_text, \"detected unusual transactions\")\n        or strings.icontains(.display_text, \"without your authorization\")\n        or strings.icontains(.display_text, \"unauthorized activitiy\")\n        or strings.icontains(.display_text, \"unauthorized transaction\")\n        or strings.icontains(.display_text, \"cancel\")\n        or strings.icontains(.display_text, \"renew\")\n        or strings.icontains(.display_text, \"refund\")\n        or regex.icontains(.display_text, 'help.{0,3}desk')\n        or strings.icontains(.display_text, \" your funds\")\n        or strings.icontains(.display_text, \" your checking\")\n        or strings.icontains(.display_text, \" your saving\")\n        or strings.icontains(.display_text, \"secure your account\")\n        or strings.icontains(.display_text, \"recover your\")\n        or strings.icontains(.display_text, \"unusual activity\")\n        or strings.icontains(.display_text, \"suspicious transaction\")\n        or strings.icontains(.display_text, \"transaction history\")\n        or strings.icontains(.display_text, \"please ignore this\")\n        or strings.icontains(.display_text, \"will be approved\")\n        or strings.icontains(.display_text, \"report activity\")\n\n        // Unicode confusables words obfuscated in note\n        or regex.icontains(.display_text,\n                           '\\+\U0001D7ED|\U0001D5FD\U0001D5EE\U0001D606\U0001D5FA\U0001D5F2\U0001D5FB\U0001D601|\U0001D5DB\U0001D5F2\U0001D5F9\U0001D5FD \U0001D5D7\U0001D5F2\U0001D600\U0001D5F8|\U0001D5FF\U0001D5F2\U0001D5F3\U0001D602\U0001D5FB\U0001D5F1|\U0001D5EE\U0001D5FB\U0001D601\U0001D5F6\U0001D603\U0001D5F6\U0001D5FF\U0001D602\U0001D600|\U0001D5F0\U0001D5EE\U0001D5F9\U0001D5F9|\U0001D5F0\U0001D5EE\U0001D5FB\U0001D5F0\U0001D5F2\U0001D5F9|\U0001D5F0\U0001D5FC\U0001D5FB\U0001D601\U0001D5EE\U0001D5F0\U0001D601|cᴀʟʟ'\n        )\n        or strings.icontains(.display_text, \"kindly\")\n        or regex.icontains(strings.replace_confusables(.display_text),\n                           '(?:call|cᴀʟʟ|reach|contact|get in touch|inform|let us know)'\n        )\n)\n"
attack_types:
  - "BEC/Fraud"
  - "Callback Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Header analysis"
  - "Sender analysis"
id: "49cc6ed5-2dd9-51b6-e228-98012fffd30f"
og_id: "0ff7a0d4-164d-5ff1-8765-783fa2008b0f"
testing_pr: 2684
testing_sha: d0742edb24bc54bb5cd8b8a7808bb385ba5b5025
