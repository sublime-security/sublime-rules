name: "Malware: TestFlight Mobile App for Meta Ads"
description: "Impersonates Meta, Facebook, or Instagram brands while redirecting users to the Apple App Store or TestFlight links, commonly used to distribute malicious mobile applications or bypass security controls. This has been observed enabling malicious ad-campaigns, compromising both banking and social media accounts."
type: "rule"
severity: "high"
source: |
  type.inbound
  and (
    // sender display name is a strong enough indicator
    // that it can be used without any other impersonation logic
    (
      regex.icontains(sender.display_name,
                      'facebook ?ads',
                      'facebook ?business',
                      'meta ?account',
                      'meta ?help',
                      'meta ?support',
                      'meta ?business',
                      'meta ?for ?business',
                      'meta ?policy',
                      'meta platform ?inc',
                      'meta[^a-zA-Z0-9]*inc',
                      'page ?ads ?support',
                      'Instagram ?Not',
                      'Instagram ?Policies',
                      'Instagram ?Report',
                      'Instagram ?Helpdesk',
                      'Instagram ?Support',
                      'Ads ?Team',
                      'Meta & Coursera'
      )
      or strings.ilevenshtein(sender.display_name, 'facebook ads') <= 2
      or strings.ilevenshtein(sender.display_name, 'facebook business') <= 2
      or (
        strings.levenshtein(sender.display_name, 'Meta Support') <= 2
        // negation for Zeta Support
        and not (
          sender.display_name == "Zeta Support"
          and sender.email.domain.root_domain == 'zetaglobal.net'
        )
        and not (
          sender.display_name == "Veza Support"
          and sender.email.domain.root_domain == 'veza.com'
          and headers.auth_summary.dmarc.pass
        )
      )
      or strings.ilike(sender.email.domain.domain, '*facebook*')
      or strings.ilike(sender.email.local_part,
                       "*instagramlive*",
                       "*facebooksupport*"
      )
    )
    // the use of these keywords (facebook, meta, meta.*support)
    // or the levenshtein distance to facebook
    // are less strong and thus need to be combined with logo detection or nlu 
    or (
      (
        (
          regex.icontains(sender.display_name,
                          '\bf[\p{Mn}\p{Cf}]*a[\p{Mn}\p{Cf}]*c[\p{Mn}\p{Cf}]*e[\p{Mn}\p{Cf}]*b[\p{Mn}\p{Cf}]*o[\p{Mn}\p{Cf}]*o[\p{Mn}\p{Cf}]*k[\p{Mn}\p{Cf}]*\b',
                          '\bm[\p{Mn}\p{Cf}]*e[\p{Mn}\p{Cf}]*t[\p{Mn}\p{Cf}]*a[\p{Mn}\p{Cf}]*\b',
                          '\bm[\p{Mn}\p{Cf}]*e[\p{Mn}\p{Cf}]*t[\p{Mn}\p{Cf}]*a[\p{Mn}\p{Cf}]*.*support',
                          '\binstagr(am)?\b'
          )
          // negate metageek.com
          and not (
            strings.icontains(sender.display_name, 'MetaGeek Support')
            and sender.email.domain.root_domain == "metageek.com"
          )
        )
        or strings.ilevenshtein(sender.display_name, 'facebook') <= 2
      )
      and (
        any(ml.logo_detect(beta.message_screenshot()).brands,
            .name in ("Facebook", "Meta", "Instagram", "Threads")
        )
        or any(ml.nlu_classifier(body.current_thread.text).intents,
               .name in ("cred_theft", "callback_scam", "steal_pii")
               and .confidence in ("medium", "high")
        )
        or regex.icontains(body.plain.raw, "(violation|infringe|copyright)")
        or any(body.links, .href_url.domain.root_domain == "rebrand.ly")
      )
    )
    // salesforce sender combined with logo detection and nlu is enough
    or (
      sender.email.domain.root_domain == "salesforce.com"
      and any(ml.logo_detect(beta.message_screenshot()).brands,
              .name in ("Facebook", "Meta", "Instagram", "Threads")
      )
      and any(ml.nlu_classifier(body.current_thread.text).intents,
              .name in ("cred_theft", "callback_scam", "steal_pii")
              and .confidence in ("medium", "high")
      )
    )
    or 
    // or the body contains a facebook/meta footer with the address citing "community support" 
    (
      regex.icontains(body.current_thread.text,
                      '(1\s+(Facebook|Meta)?\s*Way|1601\s+Willow\s+Rd?).*Menlo\s+Park.*CA.*94025'
      )
    )
  )
  // looks for TestFlight/Apple hosting
  and any(body.links,
          strings.icontains(.href_url.url, "https://testflight.apple.com")
          or any(body.links,
                 strings.icontains(.href_url.url, "https://apps.apple.com")
          )
  )
  and sender.email.domain.root_domain not in~ (
    'facebook.com',
    'facebookmail.com',
    'eventsatfacebook.com',
    'facebookenterprise.com',
    'meta.com',
    'metamail.com',
    'instagram.com',
    'medallia.com',
    'fbworkmail.com',
    'workplace.com',
    'capterra.com', // they mention "Community Guidelines"
    'facebookblueprint.com',
    'metaenterprisemail.com'
  )
  // negate metaenterprise links
  and not any(headers.reply_to, .email.email == "noreply@facebookmail.com")
  
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  
    // salesforce has been abused for meta phishing campaigns repeatedly 
    or sender.email.domain.root_domain == "salesforce.com"
  )
  and not profile.by_sender().any_messages_benign

attack_types:
  - "Credential Phishing"
  - "Malware/Ransomware"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Social engineering"
  - "Evasion"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "Natural Language Understanding"
  - "Sender analysis"
  - "URL analysis"
id: "edb43b41-0509-54af-a28e-abb98237772b"
og_id: "40d42e00-bf7e-56a2-99d4-e9f3abd769f0"
testing_pr: 3208
testing_sha: d4568fdc8dc641f3919c69d8164ff43500e4924e