name: "EML attachment with credential theft language (unknown sender)"
description: "Identifies EML attachments that use credential theft language from unknown senders."
type: "rule"
severity: "high"
source: |
  type.inbound
  // we don't look for links because it could be a QR code
  and any(attachments,
          (.content_type == "message/rfc822" or .file_extension =~ "eml")
          // credential theft language in the attached EML
          and any(ml.nlu_classifier(file.parse_eml(.).body.current_thread.text).intents,
                  .name == "cred_theft" and .confidence == "high"
          )
          and not strings.like(file.parse_eml(.).sender.email.local_part,
                               "*postmaster*",
                               "*mailer-daemon*",
                               "*administrator*"
          )
          // negate Mimecast Attachment Protection
          and not (
            any(attachments,
                .file_name == 'We sent you safe versions of your files'
            )
            and strings.contains(body.current_thread.text,
                                 'Mimecast Attachment Protection has deemed this file to be safe, but always exercise caution when opening files.'
            )
          )
          // negate Microsoft Dynamic Delivery
          and not (
            length(file.parse_eml(.).attachments) == 0
            and strings.icontains(file.parse_eml(.).body.current_thread.text,
                                         "Your attachments are currently being scanned by Safe Attachments"
            )
          )
  )
  // exclude bounce backs & read receipts
  and not strings.like(sender.email.local_part,
                       "*postmaster*",
                       "*mailer-daemon*",
                       "*administrator*"
  )
  and not regex.icontains(subject.subject, "^(undelivered|undeliverable|read:)")
  and not any(attachments, .content_type == "message/delivery-status")
  // if the "References" is in the body of the message, it's probably a bounce
  and not any(headers.references, strings.contains(body.html.display_text, .))
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
  and not profile.by_sender().any_false_positives
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Social engineering"
detection_methods:
  - "Natural Language Understanding"
  - "Sender analysis"
  - "Content analysis"
  - "Header analysis"
id: "00e06af1-d67e-513c-b53e-b9548db8c65e"
