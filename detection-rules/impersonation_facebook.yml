name: "Brand Impersonation: Meta and Subsidiaries"
description: |
  Impersonation of Meta or Meta's subsidiaries Facebook and Instagram.
references:
  - "https://www.techrepublic.com/article/google-and-amazon-most-impersonated-brands-in-phishing-attacks/"
type: "rule"
severity: "low"
source: "type.inbound\nand (\n  // sender display name is a strong enough indicator\n  // that it can be used without any other impersonation logic\n  (\n    strings.ilike(sender.display_name,\n                  '*facebook ads*',\n                  '*facebook business*',\n                  '*meta support*',\n                  '*meta for business*',\n                  '*meta policy*',\n                  'Instagram Not*',\n                  'Instagram Policies*',\n                  'Instagram Report*',\n                  'Instagram Helpdesk*',\n                  'Instagram Support*'\n    )\n    or strings.ilevenshtein(sender.display_name, 'facebook ads') <= 2\n    or strings.ilevenshtein(sender.display_name, 'facebook business') <= 2\n    or (\n      strings.ilevenshtein(sender.display_name, 'meta support') <= 2\n      // negation for Zeta Support\n      and not (\n        sender.display_name == \"Zeta Support\"\n        and sender.email.domain.root_domain == 'zetaglobal.net'\n      )\n    )\n    or strings.ilike(sender.email.domain.domain, '*facebook*')\n  )\n  // the use of these keywords (facebook, meta, meta.*support)\n  // or the levenshtien distance to facebook\n  // are less strong and thus need to be combined with logo detection or nlu \n  or (\n    (\n      (\n        regex.icontains(sender.display_name,\n                        '\\bfacebook\\b',\n                        '\\bmeta\\b',\n                        '\\bmeta.*support\\b',\n                        '\\binstagram\\b'\n        )\n        // negate metageek.com\n        and not (\n          strings.icontains(sender.display_name, 'MetaGeek Support')\n          and sender.email.domain.root_domain == \"metageek.com\"\n        )\n      )\n      or strings.ilevenshtein(sender.display_name, 'facebook') <= 2\n    )\n    and (\n      any(ml.logo_detect(beta.message_screenshot()).brands,\n          .name in (\"Facebook\", \"Meta\", \"Instagram\")\n      )\n      or any(ml.nlu_classifier(body.current_thread.text).intents,\n             .name in (\"cred_theft\", \"callback_scam\", \"steal_pii\")\n             and .confidence in (\"high\")\n      )\n    )\n  )\n  // salesforce sender combined with logo detection and nlu is enough\n  or (\n    sender.email.domain.root_domain == \"salesforce.com\"\n    and any(ml.logo_detect(beta.message_screenshot()).brands,\n            .name in (\"Facebook\", \"Meta\", \"Instagram\")\n    )\n    and any(ml.nlu_classifier(body.current_thread.text).intents,\n            .name in (\"cred_theft\", \"callback_scam\", \"steal_pii\")\n            and .confidence in (\"high\")\n    )\n  )\n  or \n  // or the body contains a facebook/meta footer with the address citing \"community support\" \n  (\n    regex.icontains(body.current_thread.text,\n                    'Attention: Community Support, 1 (Facebook|Meta)?\\s*Way, Menlo Park, CA 94025'\n    )\n    // and it contains a link to spawn a chat with facebook - this is not the way support operates\n    and (\n      any(body.links,\n          strings.ends_with(.href_url.domain.domain, 'facebook.com')\n          and strings.starts_with(.href_url.path, '/msg/')\n      )\n      or (\n        any(ml.nlu_classifier(body.current_thread.text).intents,\n            .name in (\"cred_theft\", \"callback_scam\", \"steal_pii\")\n            and .confidence in (\"high\")\n        )\n      )\n      or any(recipients.to,\n             any(body.links,\n                 strings.icontains(.href_url.url, ..email.email)\n                 or any(beta.scan_base64(.href_url.url, ignore_padding=true),\n                        strings.icontains(., ...email.email)\n                 )\n                 or any(beta.scan_base64(.href_url.fragment,\n                                         ignore_padding=true\n                        ),\n                        strings.icontains(., ...email.email)\n                 )\n             )\n      )\n    )\n  )\n)\nand sender.email.domain.root_domain not in~ (\n  'facebook.com',\n  'facebookmail.com',\n  'eventsatfacebook.com',\n  'facebookenterprise.com',\n  'meta.com',\n  'metamail.com',\n  'instagram.com',\n  'medallia.com',\n)\n// negate metaenterprise links\nand not any(headers.reply_to, .email.email == \"noreply@facebookmail.com\")\nand (\n  (\n    profile.by_sender().prevalence != \"common\"\n    and not profile.by_sender().solicited\n  )\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n  // if saleforce is being abused, sender profiles aren't very useful\n  or sender.email.email in (\"noreply@salesforce.com\", \"support@salesforce.com\")\n  // sent via Google group\n  or any(headers.hops, any(.fields, .name == \"X-Google-Group-Id\"))\n)\n\n// negate highly trusted sender domains unless they fail DMARC authentication\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n\n  // salesforce has been abused for meta phishing campaigns repeatedly \n  or sender.email.domain.root_domain == \"salesforce.com\"\n)\nand not profile.by_sender().any_false_positives\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Lookalike domain"
  - "Social engineering"
detection_methods:
  - "Header analysis"
  - "Sender analysis"
id: "e38f1e3b-79be-5a59-b084-24a851daf6b9"
testing_pr: 2445
testing_sha: 4a9a6f9e12efff48c1f972b23a0da8f609fe9064
