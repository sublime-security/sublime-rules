name: "Brand Impersonation: Shein"
description: "Detects suspicious Shein-branded communications using display name impersonation, logo detection, and deceptive content analysis. Includes checks for security/authentication topics, secure messages, notifications, and promotional content like fake surveys or giveaways. Excludes legitimate Shein domains with proper authentication and known trusted senders."
type: "rule"
severity: "medium"
source: |
  type.inbound
  and (
    // display name contains Shein
    (
      regex.icontains(strings.replace_confusables(sender.display_name), '\bsh[ie]{2}n\b')
  
      // levenshtein distance similar to Shein
      or strings.ilevenshtein(strings.replace_confusables(sender.display_name),
                              'shein'
      ) <= 1
      or any(ml.logo_detect(beta.message_screenshot()).brands,
             .name == "Shein" and .confidence == "high"
      )
    )
  )
  and (
    (
      any(beta.ml_topic(body.current_thread.text).topics,
          .name in (
            "Security and Authentication",
            "Secure Message",
            "Reminders and Notifications",
            "Advertising and Promotions" // fake surveys/giveaways have been observed
          )
          and .confidence in ("medium", "high")
      )
      and not any(beta.ml_topic(body.current_thread.text).topics,
                  .name in ("Newsletters and Digests", "Entertainment and Sports")
                  and .confidence in ("medium", "high")
      )
    )
    or (
      any(beta.ml_topic(beta.ocr(beta.message_screenshot()).text).topics,
          .name in (
            "Security and Authentication",
            "Secure Message",
            "Reminders and Notifications",
            "Advertising and Promotions" // fake surveys/giveaways have been observed
          )
          and .confidence in ("medium", "high")
          and beta.ocr(beta.message_screenshot()).text != ""
      )
      and not any(beta.ml_topic(beta.ocr(beta.message_screenshot()).text).topics,
                  .name in ("Newsletters and Digests", "Entertainment and Sports")
                  and .confidence in ("medium", "high")
      )
    )
    or any(ml.nlu_classifier(body.current_thread.text).intents,
           .name == "cred_theft" and .confidence == "high"
    )
    or any(ml.nlu_classifier(beta.ocr(beta.message_screenshot()).text).intents,
           .name == "cred_theft" and .confidence == "high"
    )
  )
  
  // and the sender is not in org_domains or from Shein domains and passes auth
  and not (
    sender.email.domain.root_domain in $org_domains
    or (
      sender.email.domain.root_domain in ("shein.com", "sheinemail.com", "shein.co.uk", "sheingroup.com", "sheinnotice.com")
      and headers.auth_summary.dmarc.pass
    )
    // parse out original sender domain from Apple Private Relay info
    or (
      sender.email.domain.domain in ("privaterelay.appleid.com", "icloud.com")
        
      and strings.ilike(sender.email.local_part,
                        '*shein_com*',
                        '*sheinemail_com*'
      )
    )
  )
  // and the sender is not from high trust sender root domains
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  and (
    not profile.by_sender().solicited
    or not headers.auth_summary.dmarc.pass
    or not headers.auth_summary.spf.pass
  )

attack_types:
  - "Credential Phishing"
  - "Spam"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "Header analysis"
  - "Natural Language Understanding"
  - "Optical Character Recognition"
  - "Sender analysis"
id: "f6e27660-84ae-5681-9a9a-c38e098a05ef"
og_id: "b5843f22-9b49-56a0-a6db-259920a0c7fa"
testing_pr: 2757
testing_sha: 9f891e8aa17256f96d8c1e86e2d7609408c22972