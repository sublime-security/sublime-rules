name: "Credential Phishing: Project/Document Review Request"
description: |
  Detects phishing attempts that ask recipients to log in to view or review project proposals, documents, or other business materials. These emails often claim to be from business partners or service providers and request the recipient to authenticate to access content.
type: "rule"
severity: "medium"
source: |
  type.inbound
  and (
    // Project/document review language in the body
    regex.icontains(body.current_thread.text,
                    "project proposal for your review",
                    "document for (your|review)",
                    "log\\s*in\\s*(using|with)\\s*your\\s*(email|account)",
                    "access and review (the|your) document",
                    "review\\s*(and|the|your)\\s*(document|proposal|project)",
                    "proposal\\s*(for|awaiting)\\s*(your)?\\s*review",
                    "please\\s*(log|sign|authenticate)\\s*(in|on)\\s*to\\s*(access|review|view)",
                    "(view|access|download)\\s*(your|the)\\s*(document|proposal|project|file)"
    )
    // Subject line indicating a document/project
    or regex.icontains(subject.subject,
                      "bid delivered",
                      "project (proposal|review)",
                      "document (review|for review)",
                      "review (required|requested|needed)",
                      "proposal (ready|awaiting|for) review"
    )
  )
  // Business-related sender display names that could be impersonated
  and (
    regex.icontains(sender.display_name,
                    "consultant",
                    "project",
                    "proposal",
                    "management",
                    "director",
                    "CEO",
                    "founder",
                    "partner",
                    "sales",
                    "marketing",
                    "business",
                    "development"
    )
    // Suspicious or new sender
    or (
      not profile.by_sender().solicited
      and profile.by_sender().prevalence != "common"
    )
    // Sender has been marked as malicious before
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
  // Look for suspicious links to codebeautify.org or other URL manipulation
  and (
    any(body.links,
        strings.icontains(.href_url.url, "codebeautify.org")
        or regex.icontains(.href_url.url, 
                         "mailto:[^@]+(@[^@]+){2,}", // Multiple @ signs in mailto links
                         "login\\.php",
                         "auth\\.php",
                         "signin",
                         "authenticate"
        )
    )
    or (
      // Different display URL vs. href URL
      any(body.links,
          .display_url.domain.domain != .href_url.domain.domain
          or .display_url.domain.root_domain != .href_url.domain.root_domain
      )
    )
  )
  // Authentication failures
  and (
    // Failed SPF or DMARC
    headers.auth_summary.spf.error
    or not headers.auth_summary.dmarc.pass
  )
  // Negate legitimate replies
  and not (
    strings.istarts_with(subject.subject, "RE:")
    and (
      length(headers.references) > 0
      or any(headers.hops, any(.fields, strings.ilike(.name, "In-Reply-To")))
    )
  )
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  // exclude bounce backs & read receipts
  and not strings.like(sender.email.local_part,
                     "*postmaster*",
                     "*mailer-daemon*",
                     "*administrator*"
  )
  and not regex.icontains(subject.subject, "^(undeliverable|read:)")
  and not any(attachments, .content_type == "message/delivery-status")
  // negate sender's with any false positives
  and not profile.by_sender().any_false_positives

attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Social engineering"
  - "Impersonation"
  - "Business email compromise"
detection_methods:
  - "Content analysis"
  - "Header analysis" 
  - "Natural Language Understanding"
  - "Sender analysis"
  - "URL analysis"