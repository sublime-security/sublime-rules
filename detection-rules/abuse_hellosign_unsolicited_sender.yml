name: "Service Abuse: HelloSign From an Unsolicited Sender"
description: "Identifies messages from HelloSign where the actual sender information, extracted from various message components, has not been observed previously."
type: "rule"
severity: "low"
source: |
  // Legitimate DocSend sending infratructure  
  sender.email.domain.domain == "mail.hellosign.com"
  and headers.auth_summary.spf.pass
  and headers.auth_summary.dmarc.pass

  // extract the sender email out of the body html template
  and (
    (
      // if the sender_email is available in the body
      regex.icontains(body.html.raw,
                      '<th class="action-item--action[^\>]+\>\s*[^\<]*\((?P<sender_email>[^\)]+)\).*?</th>'
      )
      // check that the sender email has not been observed previously
      and all(regex.iextract(body.html.raw,
                             '<th class="action-item--action[^\>]+\>\s*[^\<]*\((?P<sender_email>[^\)]+)\).*?</th>'
              ),
              .named_groups["sender_domain"] not in $org_domains
              and .named_groups["sender_email"] not in $recipient_emails
              and .named_groups["sender_email"] not in $sender_emails
      )
    )
  
    // extract the sender email out of header hops if it's there
    or any(headers.hops,
           any(.fields,
               .name == "X-Mailgun-Variables"
               and strings.icontains(.value, 'on_behalf_of_email')
               and all(regex.iextract(.value,
                                      '\"on_behalf_of_email": \"(?P<sender_email>[^\"]+@(?P<sender_domain>[^\"]+))\",'
                       ),
                       .named_groups["sender_domain"] not in $org_domains
                       and .named_groups["sender_email"] not in $recipient_emails
                       and .named_groups["sender_email"] not in $sender_emails
               )
           )
    )
  
    // extract the sedner email from the "reply to sender" element withn the body.html.raw
    or (
      regex.icontains(body.html.raw,
                      '<a href="mailto:[^\?]+\?[^\"]+\"[^\>]+\>(?:<img[^\>]+\>)?\s*Reply to sender<\/a>'
      )
      and all(regex.iextract(body.html.raw,
                             '<a href="mailto:(?P<sender_email>[^\?]+@(?P<sender_domain>[^\?]+))\?[^\"]+\"[^\>]+\>(?:<img[^\>]+\>)?\s*Reply to sender<\/a>'
              ),
              .named_groups["sender_domain"] not in $org_domains
              and .named_groups["sender_email"] not in $recipient_emails
              and .named_groups["sender_email"] not in $sender_emails
      )
    )
  )
tags:
 - "Attack surface reduction"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Free file host"
detection_methods:
  - "HTML analysis"
  - "Header analysis"
  - "Sender analysis"
id: "68ca0753-207f-56a0-9dba-3bbbad002bbf"
