name: "GitHub Notification Abuse"
description: "This detection rule matches GitHub notifications which contain links to free file hosts, free subdomain hosts, and url shortners.  This has been seen in previous campaigns where malicious actors leveraged existing issues on public GitHub repositories by adding comments with links to Info Stealer malware."
type: "rule"
severity: "medium"
source: "type.inbound\n// actual GitHub notifications\nand sender.email.email == \"notifications@github.com\"\nand all(headers.reply_to, .email.domain.domain == \"reply.github.com\")\nand headers.return_path.email == \"noreply@github.com\"\nand headers.auth_summary.spf.pass\nand headers.auth_summary.dmarc.pass\n\n// remove github bots\nand not strings.iends_with(sender.display_name, \"[bot]\")\n\n// only match messages with short bodies\nand length(body.current_thread.text) <= 500\n\n// remove messages that have <pre> tag which would indicate a code comment\nand not strings.icontains(body.html.raw, '<pre>')\n\n// remove messages that have unordered lists (common on notifications from actions)\nand not (\n    strings.icontains(body.html.raw, '</ul>') \n    and strings.icontains(body.html.raw, '</li>')\n)\n\n// do not match messages where the sender display name is in the org display names.  \n// This attempts to avoid catching internal employees commenting on org repos\nand not any($org_display_names, . =~ sender.display_name)\n\n// there is only a single external link\nand length(distinct(filter(body.links,\n                  // filter any links that go back to github\n                  .href_url.domain.root_domain not in (\n                    'github.com',\n                    'githubusercontent.com',\n                    'github.io',\n                    'githubsupport.com',\n                    'githubstatus.com'\n                  )\n                  // remove embedded images\n                  and not (\n                    strings.ends_with(.href_url.url, \".jpg\")\n                    or strings.ends_with(.href_url.url, \"png\")\n                    or strings.ends_with(.href_url.url, \".svg\")\n                    or strings.ends_with(.href_url.url, \".gif\")\n                    )\n                  // remove aws codesuite links\n                  and not (\n                      .href_url.domain.root_domain == \"amazon.com\"\n                      and strings.istarts_with(.href_url.path, '/codesuite/')\n                  )\n            ), .href_url.domain.domain)\n) == 1\n\n// that single link is suspicious\nand any(\n        // filter any links that go back to github\n        filter(body.links,\n               .href_url.domain.root_domain not in (\n                 'github.com',\n                 'githubusercontent.com',\n                 'github.io',\n                 'githubsupport.com',\n                 'githubstatus.com'\n               )\n        ),\n        // see if the remaining links are within several lists\n        .href_url.domain.root_domain in $free_file_hosts\n        or (\n          .href_url.domain.root_domain in $free_subdomain_hosts\n          and .href_url.domain.subdomain is not null\n        )\n        or .href_url.domain.root_domain in $url_shorteners\n        // the domain is less than 20 days old\n        or network.whois(.href_url.domain).days_old < 20\n)\n"
attack_types:
  - "Malware/Ransomware"
tactics_and_techniques:
  - "Free subdomain host"
  - "Free file host"
  - "Evasion"
detection_methods:
  - "Header analysis"
  - "Content analysis"
  - "URL analysis"
id: "eabdee5e-1c96-543f-9786-26fda9cbe2d0"
testing_pr: 1855
testing_sha: 5241fae1587a91cd92b9cf670f1d3e2adc6f9617
