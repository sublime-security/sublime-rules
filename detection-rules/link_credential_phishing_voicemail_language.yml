name: "Fake voicemail notification (untrusted sender)"
description: |
  This rule detects a common credential phishing vector enticing the user to engage with links under the premise that they have a voicemail to retrieve.
  The rule looks for voicemail verbiage in the display name, body, subject or a combination of those elements with emojis or a medium to high credential theft NLU Intent from first-time + unsolicited sender.
type: "rule"
severity: "medium"
source: |
  type.inbound
  // contains links or attachments
  and (0 < length(body.links) <= 15 or 0 < length(attachments) <= 3)
  // the subject or display_name need some keywords which are voicemail related
  and (
    any([subject.subject, sender.display_name],
        regex.icontains(.,
                        // split phrases that occur within 3 words between or only punctuation between them
                        '(?:v[nm](\b|[[:punct:]])|\bvoice(?:mail|message)?|audio|missed(?:\sa\s)?|left( a)?|wireless)(?:\w+(\s\w+)?|[[:punct:]]+|\s+){0,3}(?:mail|message|msg|recording|received|notif|support|call\d*\b|ca[il][il](?:er)?|log|transcript(?:ion)?\b)',
                        // strong phrases
                        '(?:open mp3|audio note|\.wav|left a vm|\bvoip\b|unanswered.*call|incoming.vm|left msg|wireless caller|VM Service|voice message|missed.called|call.(?:support|service)(?: for| log)?|missed.{0,10} VM|new voicemail from|new.v.m.from.\+?\d+|new voicemail?(?:\w+(\s\w+)?|[[:punct:]]+|\s+){0,3}transcript(s|ion)?|message received)',
                        'ca[li][li](?:er)?(?:\w+(\s\w+)?|[[:punct:]]+|\s+){0,3}(?:playback|transcript)',
                        // obfuscated phone number with at least one digit in the area code and at least one obfuscated number in the last group
                        // 555-555-555X, 555-555-XXXX, 555-5XX-XXXX
                        '\b1?\(?(\d{3}|\d{2}[\*X]|\d[\*X]{2})\)?[^a-z0-9]{0,2}(\d{2,3}|\d{2}[\*X]|\d[\*X]{2}|[\*X]{2,3})[^a-z0-9]{0,4}(\d{3}[\*X]|\d{2}[\*X]{2}|\d[\*X]{3}|[\*X]{3,4})[^0-9]',
                        // obfuscated phone number with at least one digit in the prefix
                        // XXX-555-5555, XXX-5XX-XXXX
                        '\b1?\(?(\d{2}[\*X]|\d[\*X]{2}|[\*X]{2,3})\)?[^a-z0-9]{0,2}(\d{2,3}|\d{2}[\*X]|\d[\*X]{2})[^a-z0-9]{0,4}(\d{4}|\d{3}[\*X]|\d{2}[\*X]{2}|\d[\*X]{3}|[\*X]{3,4})\b',
        )
    )
    // body.current_thread.text inspection should be very specific to avoid FP
    or regex.icontains(
                       strings.replace_confusables(body.current_thread.text),
                       //body.current_thread.text,
                       'you (?:have |received )*(?:\w+(\s\w+)?|[[:punct:]]+|\s+){0,3}\bvoice(?:mail|audio)? (?: message)?',
                       'sent (?:from|by) (?:your )?voice (?:mail )?system',
                       'new (?:voice(?:mail)?|audio) (?:message|notification|record)',
                       'voicemail (is )?attached',
                       'a new encrypted voicemail',
                       'Your have incoming voiceRec',
                       "you(?:\'ve| have) a (?:new )?missed call",
                       'New Voicemail Received',
                       'left you a (?:\w+(\s\w+)?|[[:punct:]]+|\s+){0,3}(?:voice(?:mail)?|audio)(?: message)?',
                       'New missed call record',
                       'voicemail transcript(?:ion)?',
                       'Listen to VoiceMail'
    )
    // phishing template observed https://platform.sublime.security/messages/341eed2be003036cdd3eeee575202df8a7472b6567d0dfa0f99c3b3fb42a8e7f
    or strings.icontains(body.html.raw, '<title>Voicemail Notification</title>')
    or strings.icontains(body.html.raw, '<!-- Voicemail phone logo')
  )
  
  and 2 of (
    (
      // the sender is a freemail
      sender.email.domain.root_domain in $free_email_providers
    ),
    (
      any(ml.nlu_classifier(body.current_thread.text).intents,
          .name in ("cred_theft") and .confidence in ("medium", "high")
      )
    ),
    (
      any(attachments,
          .content_type in ("html", "text", "text/html")
          and any(ml.logo_detect(file.html_screenshot(.)).brands,
                  .name in ("Microsoft") and .confidence in ("medium", "high")
          )
      )
    ),
    (
      regex.icontains(sender.display_name,
                      '(voice|audio|call|missed|caii)(\s?|-)(mail|message|recording|call|caii)|(transcription|Caller.?ID)'
      )
    ),
    // attachment names are often HTML and voice mail related
    (
      any(attachments,
          (
            .content_type in ("html", "text", "text/html")
            or .file_type in ("html", "unknown")
            or .file_type == "pdf"
          )
          and (
            regex.icontains(.file_name,
                            '(?:voice|audio|call|missed|caii|mail|message|recording|call|caii|transcription|v[nm]|audio|play|listen|unheard|msg)',
                            // contains a time
                            // 01min , 60secs
                            '0?[1-9]\s*min(?:(?:ute)?s)?',
                            '\d{1,2}\s*s(?:ec(?:ond)?s)?',
                            // (00:50s)
                            // 3:26 seconds
                            '[\(\[]?(?:\d{1,2}[\:\s-])\d{1,2}[\)\]]?\s*(?:s(?:(?:ecs?)onds)?)[\)\]]?',
                            // 03min25secs
                            '0?[1-9]\s*min(?:(?:ute)?s)?\d{1,2}\s*s(?:ec(?:ond)?s)?',
                            // [0:39] 
                            // (0:39) 
                            '[\(\[](?:\d{1,2}[\:\s-])\d{1,2}[\)\]]\s',
                            // contains an emoji
                            '[\x{1F300}-\x{1F5FF}\x{1F600}-\x{1F64F}\x{1F680}-\x{1F6FF}\x{1F700}-\x{1F77F}\x{1F780}-\x{1F7FF}\x{1F900}-\x{1F9FF}\x{2600}-\x{26FF}\x{2700}-\x{27BF}\x{2300}-\x{23FF}]'
            )
            // somtimes there is no name, it's just the extension which is also strange
            or .file_name in~ (".htm", ".html")
            // or sometimes it has no name....
            or .file_name is null
          )
      )
    ),
    // html attachment is small and contains javascript
    (
      any(attachments,
          (
            .content_type in ("html", "text", "text/html")
            or .file_type in ("html", "unknown")
          )
          and (.size < 1500 and any(file.explode(.), length(.scan.html.scripts) > 0)
          )
      )
    ),
    (
      any(attachments,
          (
              .content_type in ("html", "text", "text/html")
              or .file_type in ("html", "unknown")
          )
          and any(recipients.to,
                  // the html attachment contains a receipient email address
                  strings.contains(file.parse_html(..).raw, .email.email)
                  // the sld of the domain is in the attachment name
                  or strings.contains(..file_name, .email.domain.sld)
              )
      )
    ),
    // the body links contain the recipients email
    (
      length(filter(recipients.to, .email.email != "" or .email.domain.valid)) > 0
      and any(body.links,
              any(recipients.to,
                  strings.icontains(..href_url.url, .email.email)
                  or strings.icontains(..href_url.url, .email.local_part)
              )
      )
    ),
    (
      length(body.current_thread.text) < 700
      and regex.icontains(body.current_thread.text,
                          'Méssãge|Méssage|Recéived|Addréss'
      )
    ),
    (
      // sender domain matches no body domains
      // only inspect "links" that have a display_text and display_url is null to remove "plain text" email address from being caught
      length(filter(body.links,
                    .display_text is not null and .display_url.url is null and .href_url.domain.valid
             )
      ) > 0
      and all(filter(body.links,
                     .display_text is not null and .display_url.url is null and .href_url.domain.valid
              ),
              .href_url.domain.root_domain != sender.email.domain.root_domain
              and .href_url.domain.root_domain not in $org_domains
              and .href_url.domain.root_domain not in ("aka.ms")
              and .href_url.domain.root_domain not in (
                "unitelvoice.com",
                "googleapis.com",
                "dialmycalls.com",
                "ringcentral.biz"
              )
      )
    ),
    // the body links contain vm related phrases
    (
      any(body.links,
          regex.contains(.display_text, '[^a-z]*[A-Z][^a-z]*')
          and regex.icontains(.display_text,
                              '(v[nm]|voice|audio|call|missed|caii)(\s?|-)(mail|message|recording|call|caii)|transcription|open mp3|audio note|listen|playback|\(?(?:\*\*\*|[0-9]{3})?.(?:\*\*\*|[0-9]{3})[^a-z]{0,2}(?:\*{4}|\d+\*+)|play'
          )
          // negate FP terms in link display texts
          and not strings.icontains(.display_text, 'voice call center')
      )
    ),
    (
      any(body.links,
          .href_url.path == "/ctt"
          and regex.icontains(.display_text,
                              '(v[nm]|voice|audio|call|missed|caii)(\s?|-)(mail|message|recording|call|caii)|transcription|open mp3|audio note|listen|playback|\(?(?:\*\*\*|[0-9]{3})?.(?:\*\*\*|[0-9]{3})[^a-z]{0,2}(?:\*{4}|\d+\*+)|play'
          )
          // negate FP terms in link display texts
          and not strings.icontains(.display_text, 'voice call center')
      )
    ),
    // new domains
    (
      any(body.links,
          network.whois(.href_url.domain).days_old < 10
          and not strings.icontains(.href_url.path, "unsubscribe")
      )
    ),
    (
      any(recipients.to,
          // recipient's SLD is in the sender's display name
          strings.icontains(sender.display_name, .email.domain.sld)
          // recipient's SLD is in the sender's display name
          or strings.icontains(subject.subject, .email.domain.sld)
      )
    ),
    // often times the subject or sender display name will contain time references
    (
      any([sender.display_name, subject.subject, body.current_thread.text],
          regex.icontains(.,
                          // 01min , 60secs
                          '0?[1-9]\s*min(?:(?:ute)?s)?\b',
                          '\d{1,2}\s*s(?:ec(?:ond)?s)?\b',
                          // (00:50s)
                          // 3:26 seconds
                          '[\(\[]?(?:\d{1,2}[\:\s-])\d{1,2}[\)\]]?\s*(?:s(?:(?:ecs?)onds)?)[\)\]]?',
                          // 03min25secs
                          '0?[1-9]\s*min(?:(?:ute)?s)?\d{1,2}\s*s(?:ec(?:ond)?s)?',
                          // [0:39] 
                          // (0:39) 
                          '[\(\[](?:\d{1,2}[\:\s-])\d{1,2}[\)\]]\s'
          )
      )
    ),
    // often times the subject or sender display name will contain dates
    (
      any([sender.display_name, subject.subject],
          // days of week
          any([
                'monday',
                'tuesday',
                'wednesday',
                'thursday',
                'friday',
                'saturday',
                'sunday'
              ],
              strings.icontains(.., .)
          )
          // months
          // may is problematic for words like "Mayor", "Maybe", "MayFlower", etc
          or any([
                   "January",
                   "February",
                   "March",
                   "April",
                   "June",
                   "July",
                   "August",
                   "September",
                   "October",
                   "November",
                   "December"
                 ],
                 strings.icontains(.., .)
          )
          // use a regex for May
          or regex.icontains(., '\bmay\b')
          // common date formats
          or regex.contains(.,
                            // YYYY-MM-DD or YY-MM-DD (ISO 8601 format)
                            '\d{2}(\d{2})?-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])',
                            // MM/DD/YYYY or MM/DD/YY (US format)
                            '(0[1-9]|1[0-2])/(0[1-9]|[12]\d|3[01])/\d{2}(\d{2})?',
                            // DD/MM/YYYY or DD/MM/YY (European format)
                            '(0[1-9]|[12]\d|3[01])/(0[1-9]|1[0-2])/\d{2}(\d{2})?',
                            // Month DD, YYYY or Month DD, YY (e.g., March 15, 2024 or March 15, 24)
                            '(January|February|March|April|May|June|July|August|September|October|November|December) (0[1-9]|[12]\d|3[01]), \d{2}(\d{2})?'
          )
          // common time formats
          or regex.contains(.,
                            // Example: 23:45, 08:30
                            '([01]\d|2[0-3]):([0-5]\d)',
                            // Example: 23:45:59, 08:30:12
                            '([01]\d|2[0-3]):([0-5]\d):([0-5]\d)',
                            // Example: 08:30 AM, 12:45 pm
                            '(0[1-9]|1[0-2]):([0-5]\d)\s?([AaPp][Mm])',
                            // Example: 08:30 AM, 12:45 pm
                            '(0[1-9]|1[0-2]):([0-5]\d):([0-5]\d) ?([AaPp][Mm])'
          )
      )
    ),
    // there are often emoji in the sender display name
    (
      any([sender.display_name, subject.subject],
          // contains an emoji
          regex.contains(.,
                         '[\x{1F300}-\x{1F5FF}\x{1F600}-\x{1F64F}\x{1F680}-\x{1F6FF}\x{1F700}-\x{1F77F}\x{1F780}-\x{1F7FF}\x{1F900}-\x{1F9FF}\x{2600}-\x{26FF}\x{2700}-\x{27BF}\x{2300}-\x{23FF}]'
          )
          // negate where the emoji occur in tags
          and not regex.contains(.,
                                 '^(?:\[[^\]]*\]\s*)*\[[^\]]*[\x{1F300}-\x{1F5FF}\x{1F600}-\x{1F64F}\x{1F680}-\x{1F6FF}\x{1F700}-\x{1F77F}\x{1F780}-\x{1F7FF}\x{1F900}-\x{1F9FF}\x{2600}-\x{26FF}\x{2700}-\x{27BF}\x{2300}-\x{23FF}][^\]]*\]'
          )
      )
    ),
    // an attachment is a pdf or image that contains a url
    (
      1 <= length(attachments) <= 2
      and any(attachments,
              (.file_type in $file_types_images or .file_type == "pdf")
              and any(file.explode(.),
                      .scan.qr.type == "url"
                      or strings.icontains(.scan.qr.data, 'http')
                      or any(recipients.to,
                             strings.icontains(..scan.qr.data, .email.local_part)
                             or strings.icontains(..scan.qr.data, .email.email)
                      )
              )
      )
    )
  )
  
  // negating legit replies and legitimate audio file attachments and known voicemail senders
  and not (
    sender.email.domain.valid
    and sender.email.domain.root_domain in (
      "magicjack.com",
      "unitelvoice.com",
      "voipinterface.net",
      "ringcentral.biz",
      "verizonwireless.com",
      "t-mobile.com"
    )
  )
  and not any(attachments, strings.starts_with(.content_type, "audio"))
  and not (
    (
      strings.istarts_with(subject.subject, "RE:")
      // out of office auto-reply
      // the NLU model will handle these better natively soon
      or strings.istarts_with(subject.subject, "Automatic reply:")
    )
    and (
      length(headers.references) > 0
      or any(headers.hops, any(.fields, strings.ilike(.name, "In-Reply-To")))
    )
  )
  and (
    (
      profile.by_sender().prevalence in ("new", "outlier")
      and not profile.by_sender().solicited
    )
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_false_positives
    )
  )
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  // bounce-back negations
  and not any(attachments,
            any(file.parse_eml(.).attachments,
                .content_type == "message/delivery-status"
            )
      )
  // bounce-back negations
  and not (
    any(attachments,
        .content_type in ("message/delivery-status", "text/calendar")
    )
  )
  // negate bouncebacks from proofpoint
  and not (
    sender.display_name == "Mail Delivery Subsystem"
    and strings.ends_with(headers.message_id, "pphosted.com>")
    and any(headers.hops,
            .index == 0 and strings.contains(.received.server.raw, "pphosted.com")
    )
    and any(attachments, .content_type == "message/rfc822")
  )
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Natural Language Understanding"
  - "Sender analysis"
  - "URL analysis"
id: "74ba7787-e543-5ce8-b6eb-e1ecdb8f1d67"
