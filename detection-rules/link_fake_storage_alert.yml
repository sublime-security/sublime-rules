name: "Credential Phishing: Fake Storage alerts (unsolicited)"
description: "This rule targets credential phishing attempts disguised as storage space alerts, activating for inbound emails with specific storage-related keywords and evaluating sender trustworthiness and history."
type: "rule"
severity: "medium"
source: |
  type.inbound
  and (
    // body is short or padded
    length(body.current_thread.text) < 1200
    or (
      // html padding obfuscation
      regex.icontains(body.html.raw, '((<br\s*/?>\s*){20,}|\n{20,})')
      or regex.icontains(body.html.raw, '(<p[^>]*>\s*<br\s*/?>\s*</p>\s*){30,}')
      or regex.icontains(body.html.raw,
                         '(<p class=".*?"><span style=".*?"><o:p>&nbsp;</o:p></span></p>\s*){30,}'
      )
      or regex.icontains(body.html.raw, '(<p>&nbsp;</p>\s*){7,}')
      or regex.icontains(body.html.raw, '(<p[^>]*>\s*&nbsp;<br>\s*</p>\s*){5,}')
      or regex.icontains(body.html.raw, '(<p[^>]*>&nbsp;</p>\s*){7,}')
      or strings.count(body.html.raw, '&nbsp;‌&nbsp;‌&nbsp') > 50
    )
  )
  and 0 < length(body.links) < 8
  and (
    (
      any([subject.subject, sender.display_name], regex.icontains(., "storage"))
      or any([subject.subject, sender.display_name],
             strings.icontains(., "mailbox")
             and strings.contains(body.current_thread.text, "storage")
      )
    )
    or (
      any(file.explode(beta.message_screenshot()),
          any(ml.nlu_classifier(.scan.ocr.raw).intents,
              .name == "cred_theft" and .confidence == "high"
          )
          and strings.ilike(.scan.ocr.raw,
                            "*storage*full*",
                            "*free*upgrade*",
                            "*storage*details*",
                            "*storage*quot",
                            "*email*storage*",
                            "*total*storage*"
          )
      )
    )
  )
  and (
    regex.icontains(subject.subject, '\bfull\b')
    or strings.icontains(subject.subject, "exceeded")
    or strings.icontains(subject.subject, "out of")
    or strings.icontains(subject.subject, "icloud")
    or strings.icontains(subject.subject, "limit")
    or strings.icontains(subject.subject, "all storage used")
  )
  
  // negate legitimate sharepoint storage alerts
  and (
    (
      sender.email.email == "no-reply@sharepointonline.com"
      and not headers.auth_summary.dmarc.pass
      and (
        not all(body.links,
                .href_url.domain.root_domain in~ (
                  "sharepoint.com",
                  "microsoft.com",
                  "aka.ms"
                )
        )
      )
    )
    or sender.email.email != "no-reply@sharepointonline.com"
  )
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  and (
    not profile.by_sender().solicited
    or profile.by_sender().any_messages_malicious_or_spam
  )

attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Sender analysis"

id: "750f04d6-f68a-564c-9e41-c1e5a58df28f"
