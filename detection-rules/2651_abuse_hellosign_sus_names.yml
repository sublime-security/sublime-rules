name: "Service Abuse: HelloSign Share with Suspicious Sender or Document Name"
description: "The detection rule is designed to identify messages sent from HelloSign that notify recipients about a shared file and contain suspicious content either in the document or the sender's display name."
type: "rule"
severity: "medium"
source: "type.inbound\n\n// Legitimate Dropbox sending infrastructure\nand sender.email.email == \"noreply@mail.hellosign.com\"\nand headers.auth_summary.spf.pass\nand headers.auth_summary.dmarc.pass\nand (\n  strings.icontains(subject.subject, ' - Signature Requested')\n  or (\n    strings.icontains(subject.subject, 'Reminder: ')\n    and strings.icontains(subject.subject, 'awaiting your signature')\n  )\n)\nand not strings.icontains(subject.subject, 'You just signed')\n// negate CDP Esign which reuses hellosign\nand not strings.contains(body.current_thread.text, '@cdpesign.com')\n// negate messages where the \"on_behalf_of_email\" is within the org_domains\nand not any(headers.hops,\n            any(.fields,\n                .name == \"X-Mailgun-Variables\"\n                and strings.icontains(.value, 'on_behalf_of_email')\n                and all(regex.iextract(.value,\n                                       '\\\"on_behalf_of_email\": \\\"(?P<sender_email>[^\\\"]+@(?P<sender_domain>[^\\\"]+))\\\",'\n                        ),\n                        .named_groups[\"sender_domain\"] in $org_domains\n                )\n            )\n)\n// sometimes there isn't an on_behalf_of_email, so in those cases we can use the body to extract the sender\nand not (\n  regex.icontains(body.html.raw,\n                  '<th class=\"action-item--action[^\\>]+\\>\\s*[^\\<]*\\((?P<sender_email>[^\\)]+)\\).*?</th>'\n  )\n  // check that the sender email has not been observed previously\n  and all(regex.iextract(body.html.raw,\n                         '<th class=\"action-item--action[^\\>]+\\>\\s*[^\\<]*\\((?P<sender_email>[^\\\"]+@(?P<sender_domain>[^\\\"]+))\\).*?</th>'\n          ),\n          .named_groups[\"sender_domain\"] in $org_domains\n  )\n)\nand (\n  // contains the word dropbox\n  // the subject is in the format of \"<actor controlled title>(?: - Signature Requested by| is awaiting your signature) <actor controlled name>\"\n  (\n    strings.icontains(subject.subject, 'dropbox')\n    // negate where the sender is dropbox\n    and not any(headers.hops,\n                any(.fields,\n                    .name == \"X-Mailgun-Variables\"\n                    and regex.contains(.value,\n                                       '\\\"on_behalf_of_email\": \\\"[^\\\"]+@dropbox.com\\\"'\n                    )\n                )\n    )\n  )\n  or strings.icontains(subject.subject, 'sharefile')\n  or strings.icontains(subject.subject, 'helloshare')\n\n  // sender names part of the subject\n  or (\n    // Signature Terms in the Sender Display Name\n    strings.icontains(sender.display_name, 'Signature Requ')\n    // Billing Accounting\n    or regex.icontains(sender.display_name,\n                       'Accounts? (?:Payable|Receivable)',\n    )\n    or strings.icontains(sender.display_name, 'Billing Support')\n\n    // HR/Payroll/Legal/etc\n    or strings.icontains(sender.display_name, 'Compliance HR')\n    or regex.icontains(sender.display_name,\n                       '(?:Compliance|Executive|\\bHR\\b|Human Resources|\\bHR\\b|\\bIT\\b|Legal|Payroll|Purchasing|Operations|Security|Support).*(?:Department|Dept|Team|Desk)?'\n    )\n    or strings.icontains(sender.display_name, 'Corporate Communications')\n    or strings.icontains(sender.display_name, 'Employee Relations')\n    or strings.icontains(sender.display_name, 'Office Manager')\n    or strings.icontains(sender.display_name, 'Risk Management')\n    or regex.icontains(sender.display_name, 'Payroll Admin(?:istrator)?')\n\n    // IT related\n    or regex.icontains(sender.display_name,\n                       'IT Support',\n                       'Information Technology',\n                       '(?:Network|System) Admin(?:istrator)?',\n                       'Help Desk',\n                       'Tech(?:nical) Support'\n    )\n  )\n\n  // NLU/Logo Detection on message from the sender/message body \n  or any(html.xpath(body.html,\n                 '//table[not(@class)]/tbody/tr/th[2]/p[@class=\"subhead\"][2]/parent::th'\n      ).nodes,\n      any(ml.nlu_classifier(.display_text).intents,\n          .name == \"callback_scam\" and .confidence == \"high\"\n      )\n  )\n  // callback logos\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n         .name in (\"PayPal\", \"Norton\", \"GeekSquad\", \"Ebay\", \"McAfee\", \"AT&T\")\n  )\n\n  // filename analysis\n  // the filename is also contianed in the subject line\n  or (\n    // scanner themed\n    regex.icontains(subject.subject,\n                    'scanne[rd].*(?: - Signature Requested by| is awaiting your signature)'\n    )\n    // image theme\n    or regex.icontains(subject.subject,\n                       '_IMG_.*(?: - Signature Requested by| is awaiting your signature)',\n                       'IMG[_-](?:\\d|\\W)+.*(?: - Signature Requested by| is awaiting your signature)'\n    )\n    // Invoice Themes\n    or regex.icontains(subject.subject,\n                       '(INV\\b|\\bACH\\b|Wire Confirmation|P[O0]\\W+?\\d+\\\"|P[O0](?:\\W+?|\\d+)|Purchase Order|Past Due|Remit(?:tance)?).*(?: - Signature Requested by| is awaiting your signature)'\n    )\n    // Payment Themes\n    or regex.icontains(subject.subject,\n                       '(?:payment.*(?:complete|confirmation|approved|recent|processing)|(complete|confirmation|approved|recent|processing).*payment).*(?: - Signature Requested by| is awaiting your signature)'\n    )\n\n    // Payroll/HR\n    or regex.icontains(subject.subject,\n                       '(?:Payroll|Employee Pay\\b|Salary|Benefit Enrollment|Payment.*Benefit|Benefit.*Update|Employee Handbook|Reimbursement Approved).*(?: - Signature Requested by| is awaiting your signature)'\n    )\n\n    // shared files/extenstion/urgency/CTA\n    or regex.icontains(subject.subject,\n                       '(?:Urgent|Important|Immediate|Secure|Encrypt|shared|\\bsent\\b|protected|Validate|Final Notice|Review(?:and |& )?Sign|Download PDF).*(?: - Signature Requested by| is awaiting your signature)'\n    )\n\n    // MFA theme\n    or regex.icontains(subject.subject,\n                       '(?:Verification Code|\\bMFA\\b).*(?: - Signature Requested by| is awaiting your signature)'\n    )\n  )\n)\n"
attack_types:
  - "Callback Phishing"
  - "BEC/Fraud"
tactics_and_techniques:
  - "Evasion"
  - "Social engineering"
detection_methods:
  - "Sender analysis"
  - "Header analysis"
  - "Content analysis"
id: "8d3dbbe8-5685-5ba8-7ed0-4a9ee4653e04"
og_id: "464d98f3-38b4-5a72-b0d5-e3a148f88025"
testing_pr: 2651
testing_sha: c5ecd2aa4e6084253d6f9fdf108e0b84a35d1cd9
