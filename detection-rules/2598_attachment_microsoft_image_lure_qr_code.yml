name: "Brand impersonation: Microsoft (QR code)"
description: |
  Detects messages using Microsoft image based lures, referencing or including a QR code from an Unsolicited sender. These messages often lead users to phishing sites or initiate unwanted downloads.
type: "rule"
severity: "high"
source: "type.inbound\nand (\n  any(attachments,\n      (\n        .file_type in $file_types_images\n        or .file_type == \"pdf\"\n        or .file_type in~ $file_extensions_macros\n      )\n      and (\n        any(ml.logo_detect(.).brands, strings.starts_with(.name, \"Microsoft\"))\n        or any(file.explode(.),\n               // for Office documents\n               .flavors.mime == \"text/xml\"\n               and any(.scan.strings.strings,\n                       regex.icontains(.,\n                                       'Microsoft\\s*(?:\\w+(?:\\s*\\w+)?|[[:punct:]]+|\\s+){0,3}\\s*(?:Authenticat(?:e|or|ion)|2fa|Multi.Factor|(?:qr|bar).code|action.require|alert|Att(?:n|ention))'\n                       )\n               )\n        )\n      )\n  )\n  or any(ml.logo_detect(beta.message_screenshot()).brands,\n         strings.starts_with(.name, \"Microsoft\")\n  )\n  or (\n    // limited body length \n    length(body.current_thread.text) < 300\n    and any(filter(attachments,\n                   .file_type in $file_types_images\n                   // image attachments that are displayed in the body\n                   // when the content-id is corrected, this will be much more siple\n                   and any(regex.extract(.content_id, '^<(?P<cid>[^\\>]+)\\>$'),\n                           strings.icontains(body.html.raw,\n                                             .named_groups[\"cid\"]\n                           )\n                   )\n            ),\n            // those imagines contain the wording\n            any(file.explode(.),\n                regex.icontains(.scan.ocr.raw,\n                                'Microsoft\\s*(?:\\w+(?:\\s*\\w+)?|[[:punct:]]+|\\s+){0,3}\\s*(?:Authenticat(?:e|or|ion)|2fa|Multi.Factor|(?:qr|bar).code|action.require|alert|Att(?:n|ention))'\n                )\n            )\n    )\n  )\n)\nand any(attachments,\n        (\n          .file_type in $file_types_images\n          or .file_type == \"pdf\"\n          or .file_type in $file_extensions_macros\n        )\n        and (\n          any(file.explode(.),\n              regex.icontains(.scan.ocr.raw, 'scan|camera')\n              and regex.icontains(.scan.ocr.raw, '\\bQR\\b|Q\\.R\\.|barcode')\n          )\n          or (\n            any(file.explode(.),\n                .scan.qr.type == \"url\"\n                // recipient email address is present in the URL, a common tactic used in credential phishing attacks \n                and any(recipients.to,\n                        (\n                          (strings.icontains(..scan.qr.data, .email.email))\n\n                          // the recipients sld is in the senders display name\n                          or any(recipients.to,\n                                 strings.icontains(sender.display_name,\n                                                   .email.domain.sld\n                                 )\n                          )\n\n                          // the recipient local is in the body  \n                          or any(recipients.to,\n                                 strings.icontains(body.current_thread.text,\n                                                   .email.local_part\n                                 )\n                          )\n\n                          // or the body is null \n                          or body.current_thread.text is null\n                          or body.current_thread.text == \"\"\n\n                          // or the subject contains authentication/urgency verbiage\n                          or regex.contains(subject.subject,\n                                            \"(Authenticat(e|or|ion)|2fa|Multi.Factor|(qr|bar).code|action.require|alert|Att(n|ention):)\"\n                          )\n                        )\n                        and (\n                          .email.domain.valid\n                          or strings.icontains(.display_name, \"undisclosed\")\n                        )\n                )\n            )\n          )\n        )\n)\nand (\n  not any(headers.hops,\n          .authentication_results.compauth.verdict is not null\n          and .authentication_results.compauth.verdict == \"pass\"\n          and sender.email.domain.domain == \"microsoft.com\"\n  )\n)\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\nand not profile.by_sender().any_false_positives\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "PDF"
  - "QR code"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Header analysis"
  - "QR code analysis"
  - "Sender analysis"
id: "3d79a92a-0ff4-55f2-f2e8-2a8de57f21e8"
og_id: "ed0f772a-6543-5947-80d1-55a11ea63074"
testing_pr: 2598
testing_sha: 274dffd9ed28e85448456c8d3180c3c1b0e523ed
