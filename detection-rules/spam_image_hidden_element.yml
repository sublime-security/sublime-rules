name: "Spam: Image as content with Hidden HTML Element"
description: "This has been observed in the delivery of emails containing account/membership expiration lure themes of popular online services or delivery notifications."
type: "rule"
severity: "low"
source: "type.inbound\nand (not profile.by_sender().solicited or sender.email.email == \"\")\n// not high trust sender domains\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\nand (\n  // find the template - a link that is a centered image\n  (\n    // at the start of a center\n    regex.contains(body.html.raw,\n                   'center(?:\\x22[^\\>]*)?\\>\\s*<a href=\\\"https?:\\/\\/[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*[^\\n]*?(?:\\<img src=\\x22[^\\x22]+\\x22>(?:<[a-z]+>\\s*)*){1,}<\\/a>'\n    )\n    // method two for the start of a center but includes an header line\n    or regex.contains(body.html.raw,\n                      'center(?:\\x22[^\\>]*)?\\>\\s*<a href=\\\"https?:\\/\\/[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*[^\\n]*?<h\\d>[^\\<]+<\\/h\\d+>\\s*(?:\\<img src=\\x22[^\\x22]+\\x22>(?:<[a-z]+>\\s*)*){1,}<\\/a>(?:<[a-z]+>\\s*)*<\\/'\n    )\n    // method three for the start of a center, but includes words not in a header line\n    or regex.contains(body.html.raw,\n                      'center(?:[\\x22\\x3b][^\\>]*)?\\>\\s*<a href=\\\"https?:\\/\\/[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*[^\\<][^\\/][^\\a]+\\s*<\\/a>\\s*(?:<[a-z]+>\\s*)*\\s*<a href=\\\"https?:\\/\\/[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*(?:<img src=\\x22[^\\x22]+\\x22>(?:<[a-z]+>\\s*)*){1,}<\\/a>'\n    )\n    // method four - the body starts with a centered div which is not visable, which contains a link and img within the link\n    or regex.contains(body.html.raw,\n                      '<body(?:\\x22[^\\>]+)?\\>\\s*<center>\\s*<(?:span|div)[^\\>]*style=\\x22[^\\x22]*\\s*(?:display\\s*\\x3a\\s*none|visibility\\s*\\x3a\\s*hidden)\\x3b[^\\x22]*\\x22(?:\\s*\\w+=\\\"\\w+\\\")*>[^\\<]+</div>\\s*<a[^\\>]*href=\"[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*(?:<img src=\\x22[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*){1,}\\<\\/a>'\n    )\n    // or at the end of the center\n    or regex.contains(body.html.raw,\n                      '<a href=\\\"https?:\\/\\/[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*(?:\\<img src=\\x22[^\\x22]+\\x22>(?:<\\/a>|(?:<[a-z]+>\\s*))*){1,}<\\/center>'\n    )\n    // at the start of the body\n    or regex.contains(body.html.raw,\n                      'body(?:\\x22[^\\>]+)?\\>\\s*<a href=\\\"https?:\\/\\/[^\\x22]+\\x22(?:\\s[a-z]+=\\x22[^\\x22]+\\x22)*>\\s*[^\\n]*?(?:\\<img src=\\x22[^\\x22]+\\x22>(?:<[a-z]+>\\s*)*){1,}<\\/a>'\n    )\n    // a href with background url which is centered very early on in the body.html.raw\n    or regex.contains(body.html.raw, '^(?:<[^\\>]+>\\s*){0,6}<a[^\\>]*href=\\x22[^\\>]+\\>\\s*<(?:div|span)[^\\>]*style=\\x22[^\\x22]*background:url\\([^\\)]+\\)[^\\x22]*center;[^\\>]*\\>\\s*<\\/(?:div|span)>\\s*</a>')\n  )\n  and (\n    // where there is a span/div that is hidden with either &nbsp\\x3b\\x200c? or underscores repeating multiple times OR followed by a new metatag\n    regex.contains(body.html.raw,\n                   '<(?:span|div)[^\\>]*style=\\x22[^\\x22]*\\s*(?:display\\s*\\x3a\\s*none|visibility\\s*\\x3a\\s*hidden)\\x3b[^\\x22]*\\x22(?:\\s*\\w+=\\\"\\w+\\\")*>\\s*(?:<\\/?[^\\>]+>\\s*)*(?:(?:_|[\\pCc\\pCf\\pCs]*&nbsp\\x3b\\s*[\\pCc\\pCf\\pCs]*){3,}|\\s+\\<meta |\\s+\\<center )'\n    )\n    or \n    // a custom css value is used to hide the body\n    // unable to use capture groups to capture the custom html tag to apply the hidden sytle\n    // instead we use [A-Za-z] to catch a single char. \n    regex.contains(body.html.raw,\n                   'style\\s+[^\\>]*type\\s*\\x3d\\s*\\\"text/css\\\"[^\\>]*>\\s*[^\\<]*[A-Za-z]\\s*\\{[^\\}]*(?:display\\s*\\x3a\\s*none|visibility\\s*\\x3a\\s*hidden)[^\\}]*\\}[^\\<]+\\</style><[A-Za-z]>'\n    )\n    or \n    // the hidden span/div is before the body/meta\n    regex.contains(body.html.raw,\n                   '<(?:span|div)[^\\>]*style=\\x22[^\\x22]*\\s*(?:display\\s*\\x3a\\s*none|visibility\\s*\\x3a\\s*hidden)\\x3b[^\\x22]*\\x22(?:\\s*\\w+=\\\"\\w+\\\")*>\\s*\\<(?:body|meta|(?:<?div[^\\>]+\\>\\s*(?:[^\\<]*|<[a-z]+>\\s*)<\\/div>\\s*){2,})'\n    )\n    // the length of the inner text is greather than or equal to 10x more than the display text\n    // this attempts to generically cover multiple methods of hiding text\n    or (\n      length(body.html.inner_text) > 0\n      and (\n        length(body.html.inner_text) >= (length(body.html.display_text) * 10)\n      )\n    )\n    // used to push down or move content out of view\n    or (\n      sum([\n            regex.count(body.html.display_text, '[\\r\\n].?[\\r\\n]'),\n            regex.icount(body.html.raw, '(?:<br>(?:[^\\<]|\\s){0,2}){3}'),\n            regex.icount(body.html.raw, '(?:<blockquote>(?:[^\\<]|\\s){0,2}){3}'),\n            regex.icount(body.html.raw, '<div>(?:.|\\s){0,2}<\\/div>'),\n            regex.icount(body.html.raw, '<span>(?:.|\\s){0,2}<\\/span>'),\n          ]\n       ) > 40\n    )\n  )\n)\n"
attack_types:
  - "Spam"
tactics_and_techniques:
  - "Evasion"
  - "Image as content"
detection_methods:
  - "Content analysis"
  - "HTML analysis"
  - "Sender analysis"
id: "5de8861f-a343-521f-ac8c-b4b91e389a6e"
testing_pr: 2419
testing_sha: 3e86aac19d040944a8d3186b34c8267eb550133e
