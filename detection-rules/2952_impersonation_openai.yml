name: "Brand Impersonation: OpenAI"
description: "Detects messages impersonating OpenAI through display name spoofing or lookalike domains, while excluding legitimate OpenAI communications and trusted senders with valid DMARC authentication."
type: "rule"
severity: "medium"
source: |
  type.inbound
  and (
    sender.display_name =~ "openai"
    or strings.ilevenshtein(sender.display_name, 'openai') <= 1
    or any(ml.logo_detect(beta.message_screenshot()).brands,
           .name == "OpenAI" and .confidence in ("medium", "high")
    )
  )
  // Exclude legitimate OpenAI domains
  and sender.email.domain.root_domain not in~ ("openai.com", "chatgpt.com")
  // negate the genuine domain found in hunts
  and sender.email.domain.root_domain not in~ ("openli.com" , "openai1.discoursemail.com")
  // negate highly trusted sender domains unless they fail DMARC authentication
  and (
    (
      sender.email.domain.root_domain in $high_trust_sender_root_domains
      and not headers.auth_summary.dmarc.pass
    )
    or sender.email.domain.root_domain not in $high_trust_sender_root_domains
  )
  and (
    not profile.by_sender().solicited
    or (
      profile.by_sender().any_messages_malicious_or_spam
      and not profile.by_sender().any_messages_benign
    )
  )
  and not profile.by_sender().any_messages_benign

attack_types:
  - "BEC/Fraud"
  - "Callback Phishing"
  - "Credential Phishing"
  - "Extortion"
  - "Malware/Ransomware"
  - "Spam"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Lookalike domain"
  - "Social engineering"
detection_methods:
  - "Header analysis"
  - "Sender analysis"
id: "f5f0a18f-bd0f-5b47-b383-7df5e25b73b3"
og_id: "7a470716-a910-566e-9cb0-7a641c0d4b40"
testing_pr: 2952
testing_sha: 275ee7a766d2a692c0682f377db5d81da7e06894